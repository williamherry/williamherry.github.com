<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[William's Blog with Octopress]]></title>
  <link href="http://williamherry.com/atom.xml" rel="self"/>
  <link href="http://williamherry.com/"/>
  <updated>2015-01-14T16:06:01+08:00</updated>
  <id>http://williamherry.com/</id>
  <author>
    <name><![CDATA[William Herry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解Docker镜像的存储原理]]></title>
    <link href="http://williamherry.com/blog/2015/01/14/how-docker-image-works-with-aufs/"/>
    <updated>2015-01-14T15:09:00+08:00</updated>
    <id>http://williamherry.com/blog/2015/01/14/how-docker-image-works-with-aufs</id>
    <content type="html"><![CDATA[<p>一开始接触Docker就对他镜像的存储原理很感兴趣,有一个问题一直不明白,Commit一个镜像的时候到底把什么存下来了,只知道他是使用分层的AUFS,具体不是特别很清楚,直到看了这篇关于<a href="http://www.thegeekstuff.com/2013/05/linux-aufs/">Linux AuFS的文章</a>,才有一个自己的认识,对不对还不知道</p>

<p>如果你用过Photoshop,那么用类比的方法就很好理解了,PS里作图一般都是一层一层的,上层如果没有内容就会透过去显示下层的内容,如果有旧覆盖下层内容.假设从下到上有ABC三层,A层上有一个红点,B层上靠右的地方有一个绿点(没有和A层上的重叠),如果只有这两层,那我们看到的就是一个红点加几个绿点,现在在上面有加一层C,他上面有一个蓝点和A层上红点的位置重叠,那么他就会覆盖A层的红点,最后我们看到的就是一个蓝点一个绿点</p>

<p>类比到文件也是这样,假设一个目录<code>/XXX</code>由自底向上的ABC三层组成,他们每一层都有一个和他们名字对应的文件(A=>A.txt, ..),同时他们都有一个叫<code>common.txt</code>文件,里面的内容分别是A,B,C,那么最终的结果是<code>/XXX</code>目录共有4个文件,<code>A.txt</code>, <code>B.txt</code>, <code>C.txt</code>和<code>common.txt</code>,而<code>common.txt</code>里的内容是C(最上层覆盖下层的)</p>

<p>我们可以用一个例子看看:</p>

<p>首先创建三个目录:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /tmp/aufs/root
</span><span class='line'>mkdir -p /tmp/aufs/layer1
</span><span class='line'>mkdir -p /tmp/aufs/layer2</span></code></pre></td></tr></table></div></figure>


<p>创建相应的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'root' &gt; /tmp/aufs/root/root.txt
</span><span class='line'>echo 'layer1' &gt; /tmp/aufs/layer1/layer1.txt
</span><span class='line'>echo 'layer2' &gt; /tmp/aufs/layer2/layer2.txt
</span><span class='line'>
</span><span class='line'>echo 'root' &gt; /tmp/aufs/root/common.txt
</span><span class='line'>echo 'layer1' &gt; /tmp/aufs/root/common.txt
</span><span class='line'>echo 'layer2' &gt; /tmp/aufs/root/common.txt</span></code></pre></td></tr></table></div></figure>


<p>然后我们把他们按顺序Mount起来</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount -t aufs -o br=/tmp/aufs/layer2:/tmp/aufs/layer1:/tmp/aufs/root none /tmp/aufs/root</span></code></pre></td></tr></table></div></figure>


<p>br后面的参数顺序是越后面越底层</p>

<p>现在<code>/tmp/aufs/root/</code>下应该有4个文件,<code>root.txt</code>, <code>layer1.txt</code>, <code>layer2.txt</code>和<code>common.txt</code>,并且<code>common.txt</code>里面的内容应该是<code>layer2</code>.同时由于现在layer2是最上层,那么<code>/tmp/aufs/root</code>里面做修改会反映到<code>/tmp/aufs/layer2</code>,在<code>/tmp/aufs/root</code>里创建文件,<code>/tmp/aufs/layer2</code>里也会出现</p>

<p>再回到前面的问题,Commit的时候到底保存的是什么呢,假设我们要基于前面的三层做修改在提交,只要再在上面加一层layer3,然后对<code>/tmp/aufs/root</code>做修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /tmp/aufs/layer3
</span><span class='line'>umount /tmp/aufs/root
</span><span class='line'>mount -t aufs -o br=/tmp/aufs/layer3:/tmp/aufs/layer2:/tmp/aufs/layer1:/tmp/aufs/root none /tmp/aufs/root</span></code></pre></td></tr></table></div></figure>


<p>Note: 没有找到可以一层一层加的方法,只能先umount在按顺序mount</p>

<p>然后再<code>/tmp/aufs/root</code>下做修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'layer3' &gt; /tmp/aufs/root/layer3.txt
</span><span class='line'>echo 'layer3' &gt; /tmp/aufs/root/common.txt</span></code></pre></td></tr></table></div></figure>


<p>这时候看<code>/tmp/aufs/layer3</code>目录,应该看到会有这两个文件,我们就可以把这个目录打个包实现Commit的目的</p>

<p>把这样的每一层保存下来,并想办法记录他们之间的关系(某一层的上层和下层是谁),差不多就可以实现Docker的镜像存储了,不过不一定对,具体怎么做得看了代码才知道</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Gitlab Shell Works]]></title>
    <link href="http://williamherry.com/blog/2015/01/14/how-gitlab-shell-works/"/>
    <updated>2015-01-14T14:06:00+08:00</updated>
    <id>http://williamherry.com/blog/2015/01/14/how-gitlab-shell-works</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年总结 && 2015年展望]]></title>
    <link href="http://williamherry.com/blog/2015/01/07/2014-conclusion-and-2015-plan/"/>
    <updated>2015-01-07T10:30:00+08:00</updated>
    <id>http://williamherry.com/blog/2015/01/07/2014-conclusion-and-2015-plan</id>
    <content type="html"><![CDATA[<p>2014年已经结束一周了,回顾过去这一年,同样又是收获颇多,很多方面都在持续地,稳定地,慢慢的提升,或许这就是幸福吧</p>

<h2>2014年总结</h2>

<h3>骑行</h3>

<p>骑行真是远远的超出了预期: 买了自行车,半年骑了差不多2000KM,参加了环萧山的比赛,完成了龙井十上十下的挑战.还记得第一次骑的时候就把一个电瓶车撞翻了,回来的时候领我骑的同事还摔了车,本以为这糟糕的开始会阻止我骑车的决心,结果出奇意外的之后都比较顺利,摔过几次车,都没什么大碍.希望2015年也可以平平安安的,并可以完成川藏线的挑战</p>

<h3>工作</h3>

<p>前面一直贪多求快,写了好多极低质量的代码,好多地方没有完全搞清楚,只是实现了基本的效果,就不去管了,导致后来出现各种诡异的,低级的Bug,有一段时间各种被同事吐槽,很不好过(不过我挺过去了,而且心里素质得到进一步提高,所以凡事都要辩证的区看). 所以之后一定要对自己的要求提高,争取做一个有追求的程序员</p>

<p>另外发现还是有好多技术理解的不够深刻,这可能都是习惯造成的,习惯上不喜欢去深究底层的东西,只有实现效果就不管了,这习惯一定得改,讲到习惯的地方在细谈</p>

<h3>五笔 => 拼音</h3>

<p>由于经常不写字,好多字不会写,导致用五笔打不出来,而且从长远看好像用拼音会更有优势,所以决定转到拼音去.转换过程并没有想象中的困难,只花了差不多一个月就已经到可用的状态了. 但是尴尬的是我发现小学时候拼音没学好,好多字还是打不出来:(, 不过不打算在转回五笔了.事实证明,很多看起来有难度的事情,只要有一个契机,加小小的坚持,还是可以完成的.</p>

<h3>领悟</h3>

<blockquote><p>千里之行始于足下</p>

<p>只要功夫深铁杵磨成针</p>

<p>聪明在于勤奋，天才在于积累</p>

<p>&hellip;</p></blockquote>

<p>有太多关于积累的名言警句,但大部分人都是听听就好了,没有更深刻的认识,因为这些都是别人总结出来的,是别人的不是自己的.人们都说长时间不吃饭会很饿,我们听了后会觉的, 好像很有道理哦,直到自己饿了好多天没吃才会想,长时间不吃饭TM会很饿呀; 刚上大学的时候就听到有人说不要挂科,不让会很惨,当时听到也觉的好像很有道理,直到我因为挂了太多课,拿不到学位证才发现,TM挂科真的很惨呀.所有很多大道理,鸡汤,自己不体会一下是不会有直观的体验的.</p>

<p>刚开始用百词斩背单词的时候并不会想到会坚持400多天,当时只是天真的想,等我坚持背100天的时候发朋友圈里,别人一定会觉得我很牛B.可是到坚持100多天的时候并不是很想分享到朋友圈,反倒是深刻的明白了一个道理:习惯真的太有用了,试想,如果我一直坚持背单词,最好形成习惯,那单词量增加不过是时间问题,在试想,如果我一年前,或五年前,十年前就有这个习惯,那我现在单词量岂不是已经很足了?</p>

<p>在把这个发现推广到其他地方,如果我很早就有每天运动的习惯,哪怕是最简单的俯卧撑,仰卧起坐之类的,坚持多年后体质也一定会有非常明显的,在比如有早睡早起,生活规律的习惯,那现在头发也应该不会掉的这么严重,如果很早就有做事认真的习惯,那今年就不会出这么多Bug了,为什么现在才明白过来?</p>

<p>突然想起上初中的时候有一个数学老师给我们讲了一个故事: 有一个人养了一头猪下了一窝小猪,其中有一只腿有缺陷站不起来,每只给猪喂食的时候这个人都是从耳朵上把这头小猪提过去吃,完了再提回去,等这头猪长到200多斤的时候,这个人可以单手提起200斤的重物.
当时听完后好像很有感触,然后就没有然后了.现在想想,如果当时能明白过来,从那时候就注重培养一些好习惯,现在岂不是已经很牛逼了?</p>

<p>不过迟点明白过来总比还没明白过来好,所以接下来的一年我回把养成好习惯放在最重要的位置;为此我还专门开发了一个网页程序: <a href="https://github.com/williamherry/habit,">https://github.com/williamherry/habit,</a> 部署在heroku上: <a href="http://habit.williamherry.com/,">http://habit.williamherry.com/,</a> 现在除了背单词以为已经有几个习惯稳定下来了,像做仰卧起坐已经坚持了100多天了吧,从原来的一口气做30个到现在已经可以一口气做140个</p>

<p><b>习惯才是最大的财富</b></p>

<h3>吉他 &amp;&amp; 高音</h3>

<p>练吉他和高音的任务远远没有完成,究其原因,之前一直习惯于做一件事想马上看到结果,看到提高,但实际上大多事情都是需要靠时间来磨的,积累足够的量变才会引起质变.所以要能学会弹一首曲子,首先得养成每天都弹弹的习惯,不过习惯也不是说想养成就可以养成的,也是需要磨时间的,鉴于已经有一些习惯正在进行中,这个只能排的后一点了,另外现在有室友了,练习会影响到他</p>

<h2>2015年计划</h2>

<p>2015年只有一件很重要的事情需要完成: 养成尽可能多的好习惯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached Cache Analysis]]></title>
    <link href="http://williamherry.com/blog/2014/09/10/memcached-cache-analysis/"/>
    <updated>2014-09-10T22:55:00+08:00</updated>
    <id>http://williamherry.com/blog/2014/09/10/memcached-cache-analysis</id>
    <content type="html"><![CDATA[<p>利用munin这样的工具可以查看到Memcached整个缓存的命中率,有时候可能会需要知道不同的缓存各自的命中率如何,这时候可以利用Rails的<a href="http://edgeguides.rubyonrails.org/active_support_instrumentation.html#active-support">ActiveSupport::Notifications</a>来帮助我们分析</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CacheLogger = Logger.new("log/cache.log")
</span><span class='line'>
</span><span class='line'>ActiveSupport::Notifications.subscribe /cache_\S*\.active_support/ do |name, start, finish, id, payload|
</span><span class='line'>  CacheLogger.info "#{name} #{start} #{payload[:key]}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会把所有的缓存的请求记录到一个日志文件里面,可以用下面的脚本去生产分析报告(from @soffolk)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>
</span><span class='line'># ./parse_cache cache.log courses
</span><span class='line'>
</span><span class='line'>read=`cat $1 | grep $2 | grep cache_read.active_support | wc -l`
</span><span class='line'>write=`cat $1 | grep $2 | grep cache_write.active_support | wc -l`
</span><span class='line'>read_multi=`cat $1 | grep $2 | grep cache_read_multi.active_support | grep -o '[as|to]-json' | wc -l`
</span><span class='line'>fetch_hit=`cat $1 | grep $2 | grep cache_fetch_hit.active_support | wc -l`
</span><span class='line'>all=$((read+read_multi))
</span><span class='line'>if [ $all = 0 ]; then
</span><span class='line'>  ratio=0
</span><span class='line'>else
</span><span class='line'>  ratio=$(echo "scale=6; $(($all-$write))/$all*100" | bc -l)
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>echo "Read:         $read"
</span><span class='line'>echo "Write:        $write"
</span><span class='line'>echo "Read Multi:   $read_multi"
</span><span class='line'>echo "Fetch Hit:    $fetch_hit"
</span><span class='line'>echo "All:          $all"
</span><span class='line'>echo "Hit Ratio:    $ratio%"</span></code></pre></td></tr></table></div></figure>


<p>另外你可能想看一下是不是分给Memcached的内存已经用光了,不断有少访问的item被挤出去</p>

<p>可以用memcdump命令dump出所有的keys</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>memcdump --servers=localhost | sort &gt; keys1.dump</span></code></pre></td></tr></table></div></figure>


<p>过几秒在dump一次</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>memcdump --servers=localhost | sort &gt; keys2.dump</span></code></pre></td></tr></table></div></figure>


<p>使用comm命令可以查看是否有变化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>comm -23 keys1.dump keys2.dump &gt; only_in_one.dump
</span><span class='line'>comm -13 keys1.dump keys2.dump &gt; only_in_two.dump</span></code></pre></td></tr></table></div></figure>


<p>实际上从memcached的内置命令stats就可以看到内存已经不够用的,一直有item被挤出去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>STAT hash_is_expanding 0
</span><span class='line'>STAT expired_unfetched 4383
</span><span class='line'>STAT evicted_unfetched 7335517 #已驱逐但未获取的对象数目 
</span><span class='line'>STAT bytes 253815528
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Login From Console]]></title>
    <link href="http://williamherry.com/blog/2014/08/22/login-from-console/"/>
    <updated>2014-08-22T14:42:00+08:00</updated>
    <id>http://williamherry.com/blog/2014/08/22/login-from-console</id>
    <content type="html"><![CDATA[<p>最近有一个问题调试了好久,这个过程中学的了一些有意思的调试方法,在这里记录一下过程</p>

<p>问题是出现在staging环境上的,有一个form已提交就报错,只有那一条数据有这个错误,
但是单独肉眼看没发现有什么问题,查看日志只有很少的错误信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::RecordNotSaved (ActiveRecord::RecordNotSaved):
</span><span class='line'>  app/forms/my_form.rb:51:in `submit'
</span><span class='line'>  app/controllers/my_controller.rb:60:in `update'</span></code></pre></td></tr></table></div></figure>


<p><code>app/forms/my_form.rb</code>的51行是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my_object.save!</span></code></pre></td></tr></table></div></figure>


<p>判断是没保存成功,由于不是在本地开发模式,不能用pry设置断点,只能打印出来了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>begin
</span><span class='line'>  my_object.save
</span><span class='line'>rescue ActiveRecord::RecordNotSaved =&gt; e
</span><span class='line'>  Rails.logger.info my_object.errors.full_messages
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>结果什么错误信息也没有,搜索了一下这个错误提示,有人说callback返回false会引起保存不成功并没有错误,例如有这样一个callback</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def hide
</span><span class='line'>  self.visible = false
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>但这个model并没有这样的Callback,把全部callback都删掉问题依旧,所以判断不是这个问题</p>

<p>同事支招把backtrace打出来会不会看出点眉目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>begin
</span><span class='line'>  my_object.save
</span><span class='line'>rescue ActiveRecord::RecordNotSaved =&gt; e
</span><span class='line'>  Rails.logger.info $!.inspect, $@
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>错误信息是多了,但任然看不出问题所在,由于经常用pry断点调试,现在已经没办法了,搜索怎么在非development环境用pry</p>

<p>这个过程中学会了怎么在console里发请求如登陆什么的</p>

<p>引用 <a href="http://stackoverflow.com/questions/151030/how-do-i-call-controller-view-methods-from-the-console-in-rails">http://stackoverflow.com/questions/151030/how-do-i-call-controller-view-methods-from-the-console-in-rails</a> 的最后一个答案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Start Rails console
</span><span class='line'>rails console
</span><span class='line'># Disable forgery_protection
</span><span class='line'>ApplicationController.allow_forgery_protection = false
</span><span class='line'># Get the login form
</span><span class='line'>app.get '/community_members/sign_in'
</span><span class='line'># View the session
</span><span class='line'>app.session.to_hash
</span><span class='line'># Copy the CSRF token "_csrf_token" and place it in the login request.
</span><span class='line'># Log in from the console to create a session
</span><span class='line'>app.post '/community_members/login', {"authenticity_token"=&gt;"gT7G17RNFaWUDLC6PJGapwHk/OEyYfI1V8yrlg0lHpM=",  "refinery_user[login]"=&gt;'chloe', 'refinery_user[password]'=&gt;'test'}
</span><span class='line'># View the session to verify CSRF token is the same
</span><span class='line'>app.session.to_hash
</span><span class='line'># Copy the CSRF token "_csrf_token" and place it in the request. It's best to edit this in Notepad++
</span><span class='line'>app.post '/refinery/blog/posts', {"authenticity_token"=&gt;"gT7G17RNFaWUDLC6PJGapwHk/OEyYfI1V8yrlg0lHpM=", "switch_locale"=&gt;"en", "post"=&gt;{"title"=&gt;"Test", "homepage"=&gt;"0", "featured"=&gt;"0", "magazine"=&gt;"0", "refinery_category_ids"=&gt;["1282"], "body"=&gt;"Tests do a body good.", "custom_teaser"=&gt;"", "draft"=&gt;"0", "tag_list"=&gt;"", "published_at(1i)"=&gt;"2014", "published_at(2i)"=&gt;"5", "published_at(3i)"=&gt;"27", "published_at(4i)"=&gt;"21", "published_at(5i)"=&gt;"20", "custom_url"=&gt;"", "source_url_title"=&gt;"", "source_url"=&gt;"", "user_id"=&gt;"56", "browser_title"=&gt;"", "meta_description"=&gt;""}, "continue_editing"=&gt;"false", "locale"=&gt;:en}</span></code></pre></td></tr></table></div></figure>


<p>登陆可以了但断点还是不行, 不过<a href="http://stackoverflow.com/questions/7744848/is-there-a-way-to-identify-why-the-database-rollsback-in-a-rails-application">http://stackoverflow.com/questions/7744848/is-there-a-way-to-identify-why-the-database-rollsback-in-a-rails-application</a> 的回答给了我灵感,保存不成功日志里会有rollback, 所以我修改了日志配置,果然发现了原因,原来是关联的model缺字段保存没成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Ohai源码学习]]></title>
    <link href="http://williamherry.com/blog/2014/02/11/learning-chef-ohai-source-code/"/>
    <updated>2014-02-11T08:28:00+08:00</updated>
    <id>http://williamherry.com/blog/2014/02/11/learning-chef-ohai-source-code</id>
    <content type="html"><![CDATA[<p>接触Chef以来一直对Ohai很感兴趣,它收集的系统信息非常全面,很好奇它是怎么收集的,现在终于有时间学习了</p>

<h3>目标</h3>

<p>搞清楚Ohai是如何收集到某一项系统消息的,如IP地址</p>

<h3>环境搭建</h3>

<p>使用<code>gem install ohai</code>安装ohai和它的依赖,然后下载ohai的源码</p>

<pre><code>git clone https://github.com/opscode/ohai.git
</code></pre>

<p>可以直接在源码目录通过<code>./bin/ohai</code>运行<code>ohai</code>,这样可以对源码做一些修改(添加调试代码)然后马上运行查看效果,而不用去找它的源码安装到系统的位置</p>

<p>还可以使用<code>pry</code>进行单步调试: <code>gem install pry</code>安装<code>pry</code>,的要调试的代码前面加上<code>binding.pry</code>,在该文件前面加上<code>require 'pry'</code></p>

<h3>查看源码过程</h3>

<p>首先找到入口,当然就是<code>bin/ohai</code>文件了,我们需要关系的只有一行</p>

<figure class='code'><figcaption><span>bin/ohai</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在看一下<code>Ohai::Application</code>的定义,我们感兴趣的是<code>run</code>方法的定义</p>

<figure class='code'><figcaption><span>lib/ohai/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="n">configure_ohai</span>
</span><span class='line'>  <span class="n">configure_logging</span>
</span><span class='line'>  <span class="n">run_application</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里前两个方法我们目前不关心,看一下<code>run_application</code>方法的定义</p>

<figure class='code'><figcaption><span>lib/ohai/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_application</span>
</span><span class='line'>  <span class="n">ohai</span> <span class="o">=</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:System</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ohai</span><span class="o">.</span><span class="n">all_plugins</span><span class="p">(</span><span class="vi">@attributes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@attributes</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">ohai</span><span class="o">.</span><span class="n">attributes_print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">ohai</span><span class="o">.</span><span class="n">json_pretty_print</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过加调试代码发现这里的<code>@attributes</code>是nil,所以这里的代码可以简化为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ohai</span> <span class="o">=</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:System</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ohai</span><span class="o">.</span><span class="n">all_plugins</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">ohai</span><span class="o">.</span><span class="n">json_pretty_print</span>
</span></code></pre></td></tr></table></div></figure>


<p>下来去看<code>Ohai::System</code>的定义</p>

<p>首先我们看一下<code>json_pretty_print</code>的定义</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">json_pretty_print</span><span class="p">(</span><span class="n">item</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">Yajl</span><span class="p">:</span><span class="ss">:Encoder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:pretty</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">item</span> <span class="o">||</span> <span class="vi">@data</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它只是把<code>@data</code>的数据格式化后输出,所以我们推测实际收集的动作是发生在<code>all_plugins</code>方法里</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">all_plugins</span><span class="p">(</span><span class="n">attribute_filter</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Reset the system when all_plugins is called since this function</span>
</span><span class='line'>  <span class="c1"># can be run multiple times in order to pick up any changes in the</span>
</span><span class='line'>  <span class="c1"># config or plugins with Chef.</span>
</span><span class='line'>  <span class="n">reset_system</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">load_plugins</span>
</span><span class='line'>  <span class="n">run_plugins</span><span class="p">(</span><span class="kp">true</span><span class="p">,</span> <span class="n">attribute_filter</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>reset_system</code>方法里只是初始化了一些实例变量,其中包括<code>@loader</code>它<code>@runner</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@loader</span> <span class="o">=</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Loader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="vi">@runner</span> <span class="o">=</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Runner</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里把<code>self</code>传了进去,这里的<code>self</code>就就<code>Ohai::System</code>的实例,我们看一下loader如何处理</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@controller</span> <span class="o">=</span> <span class="n">controller</span>
</span><span class='line'>  <span class="vi">@v6_plugin_classes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@v7_plugin_classes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>loader把<code>Ohai::System</code>的实例保存到了实例变量<code>@controller</code>中</p>

<p><code>load_plugins</code>方法只有一行,调用了<code>@loader</code>的<code>load_all</code>方法,我们看一下这个方法</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_all</span>
</span><span class='line'>  <span class="n">plugin_files_by_dir</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">plugin_file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">load_plugin_class</span><span class="p">(</span><span class="n">plugin_file</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">plugin_file</span><span class="o">.</span><span class="n">plugin_root</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_v6_plugins</span>
</span><span class='line'>  <span class="n">collect_v7_plugins</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下<code>plugin_files_by_dir</code>的定义</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">plugin_files_by_dir</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">(</span><span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:plugin_path</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">plugin_files</span><span class="p">,</span> <span class="n">plugin_path</span><span class="o">|</span>
</span><span class='line'>    <span class="n">plugin_files</span> <span class="o">+</span> <span class="no">PluginFile</span><span class="o">.</span><span class="n">find_all_in</span><span class="p">(</span><span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注释中说它搜索所有的plugin路径并返回一个包含<code>PluginFile</code>对象的数组</p>

<p>在看一下<code>PluginFile</code>对象长什么样子</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PluginFile</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:path</span><span class="p">,</span> <span class="ss">:plugin_root</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_all_in</span><span class="p">(</span><span class="n">plugin_dir</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">plugin_dir</span><span class="p">,</span> <span class="s2">&quot;**&quot;</span><span class="p">,</span> <span class="s2">&quot;*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">plugin_dir</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到它只是简单的从<code>Struct</code>继承而来,这里所起的作用就是定义了两个访问器<code>path</code>和<code>plugin_root</code>,打印出来类似这样</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#&lt;struct Ohai::Loader::PluginFile</span>
</span><span class='line'> <span class="n">path</span><span class="o">=</span><span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/aix/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="n">plugin_root</span><span class="o">=</span><span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再回到<code>load_all</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_all</span>
</span><span class='line'>  <span class="n">plugin_files_by_dir</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">plugin_file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">load_plugin_class</span><span class="p">(</span><span class="n">plugin_file</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">plugin_file</span><span class="o">.</span><span class="n">plugin_root</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_v6_plugins</span>
</span><span class='line'>  <span class="n">collect_v7_plugins</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>对每一个<code>PluginFile</code>对象调用了<code>load_plugin_class</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_plugin_class</span><span class="p">(</span><span class="n">plugin_path</span><span class="p">,</span> <span class="n">plugin_dir_path</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Read the contents of the plugin to understand if it&#39;s a V6 or V7 plugin.</span>
</span><span class='line'>  <span class="n">contents</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">contents</span> <span class="o">&lt;&lt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">IOError</span><span class="p">,</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ENOENT</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Unable to open or read plugin at </span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We assume that a plugin is a V7 plugin if it contains Ohai.plugin in its contents.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">contents</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Ohai.plugin&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">load_v7_plugin_class</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;[DEPRECATION] Plugin at </span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2"> is a version 6 plugin. \</span>
</span><span class='line'><span class="s2">Version 6 plugins will not be supported in future releases of Ohai. \</span>
</span><span class='line'><span class="s2">Please upgrade your plugin to version 7 plugin syntax. \</span>
</span><span class='line'><span class="s2">For more information visit here: docs.opscode.com/ohai_custom.html&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">load_v6_plugin_class</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">,</span> <span class="n">plugin_dir_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>他把文件里的内容读了进来,并根据有没有包含<code>Ohai.plugin</code>来有选择了调用<code>load_v7_plugin_class</code>或<code>load_v6_plugin_class</code>,我大概看来一下基本上全都包含<code>Ohai.plugin</code>,所以我们从v7追</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_v7_plugin_class</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin_class</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="no">TOPLEVEL_BINDING</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">plugin_class</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span> <span class="ow">and</span> <span class="n">plugin_class</span> <span class="o">&lt;</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:DSL</span><span class="o">::</span><span class="no">Plugin</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">IllegalPluginDefinition</span><span class="p">,</span> <span class="s2">&quot;Plugin file cannot contain any statements after the plugin definition&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">plugin_class</span><span class="o">.</span><span class="n">sources</span> <span class="o">&lt;&lt;</span> <span class="n">plugin_path</span>
</span><span class='line'>  <span class="vi">@v7_plugin_classes</span> <span class="o">&lt;&lt;</span> <span class="n">plugin_class</span> <span class="k">unless</span> <span class="vi">@v7_plugin_classes</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">plugin_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin_class</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SystemExit</span><span class="p">,</span> <span class="no">Interrupt</span>
</span><span class='line'>  <span class="k">raise</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">InvalidPluginName</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Plugin Name Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">IllegalPluginDefinition</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Plugin Definition Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">NoMethodError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Plugin Method Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: unsupported operation </span><span class="se">\&#39;</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="se">\&#39;</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SyntaxError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># split on occurrences of</span>
</span><span class='line'>  <span class="c1">#    &lt;env&gt;: syntax error,</span>
</span><span class='line'>  <span class="c1">#    &lt;env&gt;:##: syntax error,</span>
</span><span class='line'>  <span class="c1"># to remove from error message</span>
</span><span class='line'>  <span class="n">parts</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/&lt;.*&gt;[:[0-9]+]*: syntax error, /</span><span class="p">)</span>
</span><span class='line'>  <span class="n">parts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">part</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Plugin Syntax Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: </span><span class="si">#{</span><span class="n">part</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span><span class="p">,</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ENOENT</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Plugin Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Plugin Error: &lt;</span><span class="si">#{</span><span class="n">plugin_path</span><span class="si">}</span><span class="s2">&gt;: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>异常处理我们不关心,直接删掉来看</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_v7_plugin_class</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin_class</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">contents</span><span class="p">,</span> <span class="no">TOPLEVEL_BINDING</span><span class="p">,</span> <span class="n">plugin_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">plugin_class</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span> <span class="ow">and</span> <span class="n">plugin_class</span> <span class="o">&lt;</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:DSL</span><span class="o">::</span><span class="no">Plugin</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">IllegalPluginDefinition</span><span class="p">,</span> <span class="s2">&quot;Plugin file cannot contain any statements after the plugin definition&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">plugin_class</span><span class="o">.</span><span class="n">sources</span> <span class="o">&lt;&lt;</span> <span class="n">plugin_path</span>
</span><span class='line'>  <span class="vi">@v7_plugin_classes</span> <span class="o">&lt;&lt;</span> <span class="n">plugin_class</span> <span class="k">unless</span> <span class="vi">@v7_plugin_classes</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">plugin_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin_class</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里第一行把插件文件里的代码执行,返回的结果赋给<code>plugin_class</code>,把<code>plugin_path</code>保存到其中,并把它收集到实例变量<code>@v7_plugin_classes</code>中</p>

<p>我们找最简单了plugin看里面是什么</p>

<figure class='code'><figcaption><span>lib/ohai/plugins/command.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Ohai</span><span class="o">.</span><span class="n">plugin</span><span class="p">(</span><span class="ss">:Command</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provides</span> <span class="s2">&quot;command&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_data</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">command</span> <span class="no">Mash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它是调用<code>Ohai</code>的<code>plugin</code>方法,还传给它一个block,看看这个方法的定义</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">plugin</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">InvalidPluginName</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> is not a valid plugin name. A valid plugin name is a symbol which begins with a capital letter and contains no underscores&quot;</span> <span class="k">unless</span> <span class="no">NamedPlugin</span><span class="o">.</span><span class="n">valid_name?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plugin</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">NamedPlugin</span><span class="o">.</span><span class="n">strict_const_defined?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plugin</span> <span class="o">=</span> <span class="no">NamedPlugin</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plugin</span><span class="o">.</span><span class="n">class_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">DSL</span><span class="p">:</span><span class="ss">:Plugin</span><span class="o">::</span><span class="no">VersionVII</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plugin</span> <span class="o">=</span> <span class="no">NamedPlugin</span><span class="o">.</span><span class="n">const_set</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">klass</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plugin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法重点是这两行</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">DSL</span><span class="p">:</span><span class="ss">:Plugin</span><span class="o">::</span><span class="no">VersionVII</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="n">plugin</span> <span class="o">=</span> <span class="no">NamedPlugin</span><span class="o">.</span><span class="n">const_set</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">klass</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一行用传进来了block创建了一个继承自<code>DSL::Plugin::VersionVII</code>的类,然后一传进来的<code>name</code>为常量名保存到模块<code>NamedPlugin</code>中</p>

<p>我们在回到前面的plugin文件</p>

<figure class='code'><figcaption><span>lib/ohai/plugins/command.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Ohai</span><span class="o">.</span><span class="n">plugin</span><span class="p">(</span><span class="ss">:Command</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provides</span> <span class="s2">&quot;command&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_data</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">command</span> <span class="no">Mash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里还有两个方法<code>provides</code>和<code>collect_data</code>,你没有猜错,它们就是定义在继承来的<code>DSL::Plugin::VersionVII</code>中</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin/versionvii.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">provides</span><span class="p">(</span><span class="o">*</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attrs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span>
</span><span class='line'>    <span class="n">provides_attrs</span> <span class="o">&lt;&lt;</span> <span class="kp">attr</span> <span class="k">unless</span> <span class="n">provides_attrs</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它只是它传进来的参数收集到<code>provides_atts</code>,而<code>provides_atts</code>是前面生成的类的实例变量</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin/versionvii.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">provides_attrs</span>
</span><span class='line'>  <span class="vi">@provides_attrs</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在看<code>collect_data</code></p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin/versionvii.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collect_data</span><span class="p">(</span><span class="n">platform</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">,</span> <span class="o">*</span><span class="n">other_platforms</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">platform</span><span class="p">,</span> <span class="n">other_platforms</span><span class="o">].</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">plat</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">data_collector</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">plat</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">IllegalPluginDefinition</span><span class="p">,</span> <span class="s2">&quot;collect_data already defined on platform </span><span class="si">#{</span><span class="n">plat</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">data_collector</span><span class="o">[</span><span class="n">plat</span><span class="o">]</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于前面的plugin中调用这个方法的时候只传了一个快进来,所从这个方法只是把传进来了块赋值给了以<code>:default</code>为key的<code>Mash</code>对象<code>data_collector</code>中</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin/versionvii.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">data_collector</span>
</span><span class='line'>  <span class="vi">@data_collector</span> <span class="o">||=</span> <span class="no">Mash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们再一次回到<code>load_all</code>方法中</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_all</span>
</span><span class='line'>  <span class="n">plugin_files_by_dir</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">plugin_file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">load_plugin_class</span><span class="p">(</span><span class="n">plugin_file</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">plugin_file</span><span class="o">.</span><span class="n">plugin_root</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_v6_plugins</span>
</span><span class='line'>  <span class="n">collect_v7_plugins</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>还剩下两行代码,我们只看一下<code>collect_v7_plugins</code></p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">collect_v7_plugins</span>
</span><span class='line'>  <span class="vi">@v7_plugin_classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">plugin_class</span><span class="o">|</span>
</span><span class='line'>    <span class="n">load_v7_plugin</span><span class="p">(</span><span class="n">plugin_class</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>对收集的<code>plugin_class</code>调用<code>load_v7_plugin</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_v7_plugin</span><span class="p">(</span><span class="n">plugin_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin</span> <span class="o">=</span> <span class="n">plugin_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@controller</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collect_provides</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法把传进来的类实例化,并把<code>Ohai::System</code>实例的data传了进去,然后调用了<code>collect_provides</code></p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">collect_provides</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin_provides</span> <span class="o">=</span> <span class="n">plugin</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">provides_attrs</span>
</span><span class='line'>  <span class="vi">@controller</span><span class="o">.</span><span class="n">provides_map</span><span class="o">.</span><span class="n">set_providers_for</span><span class="p">(</span><span class="n">plugin</span><span class="p">,</span> <span class="n">plugin_provides</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>还记得前面最简单的plugin的代码吗,这里的<code>plugin.class.provides_attrs</code>就是<code>provides</code>后面的参数(&ldquo;command&rdquo;)</p>

<p>这里的provides_map是在<code>Ohai::System</code>的<code>reset_system</code>赋值的,是<code>ProvidesMap</code>的实例</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@provides_map</span> <span class="o">=</span> <span class="no">ProvidesMap</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后它又调用了<code>set_providers_for</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_providers_for</span><span class="p">(</span><span class="n">plugin</span><span class="p">,</span> <span class="n">provided_attributes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">plugin</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="ss">Ohai</span><span class="p">:</span><span class="ss">:DSL</span><span class="o">::</span><span class="no">Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;set_providers_for only accepts Ohai Plugin classes (got: </span><span class="si">#{</span><span class="n">plugin</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">provided_attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>    <span class="n">attrs</span> <span class="o">=</span> <span class="vi">@map</span>
</span><span class='line'>    <span class="n">parts</span> <span class="o">=</span> <span class="n">normalize_and_validate</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
</span><span class='line'>      <span class="n">attrs</span><span class="o">[</span><span class="n">part</span><span class="o">]</span> <span class="o">||=</span> <span class="no">Mash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">attrs</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">[</span><span class="n">part</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:_plugins</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:_plugins</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">plugin</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里把传来的keys它plugin收集到了providesmap的实例变量<code>@map</code>中,类似这样</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="c1">#&lt;Ohai::ProvidesMap&gt;)&gt; @map</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;cpu&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="s2">&quot;_plugins&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>       <span class="o">[</span><span class="c1">#&lt;Ohai::NamedPlugin::CPU:0x00000101a6a4d0</span>
</span><span class='line'>         <span class="vi">@data</span><span class="o">=</span><span class="p">{},</span>
</span><span class='line'>         <span class="vi">@has_run</span><span class="o">=</span><span class="kp">false</span><span class="p">,</span>
</span><span class='line'>         <span class="vi">@source</span><span class="o">=</span>
</span><span class='line'>           <span class="o">[</span><span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/aix/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/darwin/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/freebsd/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/linux/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/netbsd/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/openbsd/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/sigar/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/solaris2/cpu.rb&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;/Users/william/Codes/ohai/lib/ohai/plugins/windows/cpu.rb&quot;</span>
</span><span class='line'>           <span class="o">]</span><span class="p">,</span>
</span><span class='line'>         <span class="vi">@version</span><span class="o">=</span><span class="ss">:version7</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="o">]</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们再回到<code>all_plugins</code>方法,前面是<code>load_plugins</code>方法的深入执行过程,现在来看<code>run_plugins</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_plugins</span><span class="p">(</span><span class="n">safe</span> <span class="o">=</span> <span class="kp">false</span><span class="p">,</span> <span class="n">attribute_filter</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># First run all the version 6 plugins</span>
</span><span class='line'>  <span class="vi">@v6_dependency_solver</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v6plugin</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@runner</span><span class="o">.</span><span class="n">run_plugin</span><span class="p">(</span><span class="n">v6plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Then run all the version 7 plugins</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="vi">@provides_map</span><span class="o">.</span><span class="n">all_plugins</span><span class="p">(</span><span class="n">attribute_filter</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plugin</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@runner</span><span class="o">.</span><span class="n">run_plugin</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">AttributeNotFound</span><span class="p">,</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">DependencyCycle</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Encountered error while running plugins: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们只看v7的,这里比较简单,对每一个plugin调用<code>@runner</code>的<code>run_plugin</code>方法(<code>@runner</code>)是在<code>reset_system</code>中定义的</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_plugin</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">plugin</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="ss">Ohai</span><span class="p">:</span><span class="ss">:DSL</span><span class="o">::</span><span class="no">Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">InvalidPlugin</span><span class="p">,</span> <span class="s2">&quot;Invalid plugin </span><span class="si">#{</span><span class="n">plugin</span><span class="si">}</span><span class="s2"> (must be an Ohai::DSL::Plugin or subclass)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:disabled_plugins</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">plugin</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Skipping disabled plugin </span><span class="si">#{</span><span class="n">plugin</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">plugin</span><span class="o">.</span><span class="n">version</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:version7</span>
</span><span class='line'>      <span class="n">run_v7_plugin</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:version6</span>
</span><span class='line'>      <span class="n">run_v6_plugin</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">InvalidPlugin</span><span class="p">,</span> <span class="s2">&quot;Invalid plugin version </span><span class="si">#{</span><span class="n">plugin</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2"> for plugin </span><span class="si">#{</span><span class="n">plugin</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">Error</span>
</span><span class='line'>    <span class="k">raise</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span><span class="p">,</span><span class="ss">Errno</span><span class="p">:</span><span class="ss">:ENOENT</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Plugin </span><span class="si">#{</span><span class="n">plugin</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> threw exception </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单说它就是转而去调用<code>run_v7_plugin</code></p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_v7_plugin</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visited</span> <span class="o">=</span> <span class="o">[</span> <span class="n">plugin</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">!</span><span class="n">visited</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">next_plugin</span> <span class="o">=</span> <span class="n">visited</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">next_plugin</span><span class="o">.</span><span class="n">has_run?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">visited</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">next_plugin</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">DependencyCycle</span><span class="p">,</span> <span class="s2">&quot;Dependency cycle detected. Please refer to the following plugins: </span><span class="si">#{</span><span class="n">get_cycle</span><span class="p">(</span><span class="n">visited</span><span class="p">,</span> <span class="n">plugin</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependency_providers</span> <span class="o">=</span> <span class="n">fetch_plugins</span><span class="p">(</span><span class="n">next_plugin</span><span class="o">.</span><span class="n">dependencies</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Remove the already ran plugins from dependencies if force is not set</span>
</span><span class='line'>    <span class="c1"># Also remove the plugin that we are about to run from dependencies as well.</span>
</span><span class='line'>    <span class="n">dependency_providers</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">dep_plugin</span><span class="o">|</span>
</span><span class='line'>      <span class="n">dep_plugin</span><span class="o">.</span><span class="n">has_run?</span> <span class="o">||</span> <span class="n">dep_plugin</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">next_plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">dependency_providers</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="vi">@safe_run</span> <span class="p">?</span> <span class="n">next_plugin</span><span class="o">.</span><span class="n">safe_run</span> <span class="p">:</span> <span class="n">next_plugin</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">visited</span> <span class="o">&lt;&lt;</span> <span class="n">next_plugin</span> <span class="o">&lt;&lt;</span> <span class="n">dependency_providers</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单说就是去调用plugin自己的<code>safe_run</code>方法(因为在定义@runner的时候有传第二个参数true)</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">safe_run</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Exceptions</span><span class="o">::</span><span class="no">Error</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Plugin </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> threw </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span> <span class="n">line</span> <span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它又调用了<code>run</code>方法</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="vi">@has_run</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">run_plugin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它又调用了<code>run_plugin</code>方法,这个方法是在<code>lib/ohai/dsl/plugin/versionvii.rb</code>中定义的</p>

<figure class='code'><figcaption><span>lib/ohai/system.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_plugin</span>
</span><span class='line'>  <span class="n">collector</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">data_collector</span>
</span><span class='line'>  <span class="n">platform</span> <span class="o">=</span> <span class="n">collect_os</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">collector</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">platform</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">collector</span><span class="o">[</span><span class="n">platform</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">collector</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">collector</span><span class="o">[</span><span class="ss">:default</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="ss">Ohai</span><span class="p">:</span><span class="ss">:Log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;No data to collect for plugin </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">. Continuing...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它用<code>instance_eval</code>执行了前面动态构造Plugin类的时候保存下来的块(collect_data后面跟的块)</p>

<p>整个过程过了一遍,但有一点还没明白,最开始的地方我们发现显示出来的信息都收集在<code>Ohai::System</code>的实例<code>@ohai</code>的实例变量<code>@data</code>里,执行插件里的代码怎么会修改到它呢?</p>

<p>这是因为在实例化plugin的时候它把实例变量<code>@data</code>传了进去</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_v7_plugin</span><span class="p">(</span><span class="n">plugin_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin</span> <span class="o">=</span> <span class="n">plugin_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@controller</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collect_provides</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span>
</span><span class='line'>  <span class="n">plugin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在看一下plugin的部分代码</p>

<figure class='code'><figcaption><span>lib/ohai/loader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Ohai</span><span class="o">.</span><span class="n">plugin</span><span class="p">(</span><span class="ss">:Command</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provides</span> <span class="s2">&quot;command&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collect_data</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">command</span> <span class="no">Mash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>传给<code>collect_data</code>的块中的command是不是很奇怪,它是个什么东西?</p>

<p>答案的下面的代码中</p>

<figure class='code'><figcaption><span>lib/ohai/dsl/plugin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">get_attribute</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">set_attribute</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_attribute</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@data</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此所有迷雾都解开了, Yeah!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年规划]]></title>
    <link href="http://williamherry.com/blog/2014/01/01/2014-plans/"/>
    <updated>2014-01-01T11:52:00+08:00</updated>
    <id>http://williamherry.com/blog/2014/01/01/2014-plans</id>
    <content type="html"><![CDATA[<p>2013年已经在昨天划上的句号,回想过去的这一年,真的可以说收获很多:</p>

<ul>
<li>毕业两年换了三个工作,终于在去年找到了自己满意的工作,同事个个都是高手,一周还能打两次蓝球</li>
<li>终于用上了梦寐以求苹果电脑,虽然是公司配的不是自己买的,虽然Mac OSX系统没有想象中的好</li>
<li>其实最重要的是去年这一年大部分时间是过的比较开心的,快乐一直是我追求的最终目标</li>
<li>学会了发气咆音(vocal fry)和弹舌音</li>
<li>没有生病</li>
<li>学会了游泳</li>
</ul>


<p>当然去年没有做好的事情也非常多,这里就不拿出来一一示众,没有做好的原因都是自己在各方面都不够成熟强大,接下来的这一年还需要花很多的时候去修行</p>

<p>今天是2014年的每一天,正好简单列一下对这一年自己的规划,一些希望能够完成的事情.为了提高可行性,每一项都分解成小步骤</p>

<p>感觉不用多久,我就会升职加薪,当上总经理,出任CEO,迎娶白富美,走上人生巅峰,想想还有点小激动呢</p>

<ul>
<li>[x] 今天完成这个规划</li>
<li>[x] 学习吉他

<ul>
<li>[x] 首先需要买一把吉他</li>
<li>[ ] 学会&lt;她来听我的演唱会>的弹唱</li>
</ul>
</li>
<li>[ ] 读Rails源码,以问题的方式去读而不是从头一个文件一个文件的读,那样肯定完成不了

<ul>
<li>[ ] 列一些关于Rails如果实现的并且三兴趣的小问题,如:

<ul>
<li>[ ] Rails启动过程</li>
<li>[ ] 请求的处理过程</li>
</ul>
</li>
</ul>
</li>
<li>[ ] 可以轻松唱A2

<ul>
<li>[ ] 练习Brett Manning的Singing Success</li>
<li>[ ] 练习Brett Manning的Mastering Vibrato</li>
<li>[ ] 练习Brett Manning的Mastering Mix</li>
<li>[ ] 重复以上步骤走到达到目标</li>
</ul>
</li>
<li>[ ] 见一次大海

<ul>
<li>[ ] 找到最这里最近的海在哪里</li>
<li>[ ] 查找路线</li>
<li>[ ] 找假期或请假去</li>
</ul>
</li>
<li>[ ] 突破英语口语

<ul>
<li>[ ] 前半年继续用百词斩学单词,四级已经快学完了,之后背六级,再之后托福或雅思</li>
<li>[ ] 后半年可以考虑参加口语培训班</li>
</ul>
</li>
<li>[x] 早起累计超过一百天

<ul>
<li>[x] 早起后在Twiter上记录方便以后统计.完成后就可以放肆的熬夜和赖床了(第一天就睡到11点,不是好的预兆呀)</li>
</ul>
</li>
<li>[x] 学习佛教经典

<ul>
<li>[x] 先把已经买的相关的书看完:

<ul>
<li>[x] 读佛即是拜佛:六祖慧能传(已看完)</li>
<li>[x] 读佛即是拜佛:真实的唐僧</li>
<li>[x] 读佛即是拜佛:弥勒佛传</li>
<li>[x] 读佛即是拜佛:地藏菩萨传</li>
</ul>
</li>
</ul>
</li>
<li>[ ] 写5篇技术含量比较高的博客

<ul>
<li>[x] Chef Ohai源码学习</li>
</ul>
</li>
<li>[ ] 进一步深入了解Linux

<ul>
<li>[ ] 现在对Linux的了解还是停在两年前的水平,现在还没想好可行的方案,有可能会是

<ul>
<li>[ ] 读源代码,可以从openSUSE中的已经用Ruby重写了的yast开始</li>
<li>[ ] 玩开源硬件(目前一点兴趣都没有)</li>
</ul>
</li>
</ul>
</li>
<li>[ ] 读很多年前就想读但由于各种原因一直没有开始的几本书(都比较厚,可能没太多的时间,能读一本算一本了)

<ul>
<li>[ ] 算法导论</li>
<li>[ ] 代码大全</li>
<li>[ ] 编译原理(龙书)</li>
</ul>
</li>
<li>[ ] 进一步深入了解工作中遇到的或者自己感兴趣的技术或语言

<ul>
<li>[ ] Javascript

<ul>
<li>[ ] 把买的犀牛书看完,不然太浪费了</li>
</ul>
</li>
<li>[ ] Erlang

<ul>
<li>[ ] 把豆瓣上买的Erlang程序设计看完,不然太浪费了(豆瓣阅读真TM的烂)</li>
<li>[ ] 把已经买的Erlang/OTP并发编程实战看完,不然太浪费了</li>
</ul>
</li>
</ul>
</li>
<li>[x] 加入骑行队伍

<ul>
<li>[x] 买一辆公路自行车</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth-github使用示例]]></title>
    <link href="http://williamherry.com/blog/2013/07/29/omniauth-github-demo/"/>
    <updated>2013-07-29T11:57:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/29/omniauth-github-demo</id>
    <content type="html"><![CDATA[<p>这篇文档简单记录一下使用omniauth-github的过程</p>

<p>这里有个能跑的代码可以clone看看效果<a href="https://github.com/williamherry/omniauth-github-demo">omniauth-github-demo</a></p>

<p>首先新建项目:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new omniauth-github-demo</span></code></pre></td></tr></table></div></figure>


<p>为了让示例看起来不是很难看,我会把bootstrap也进来:</p>

<ul>
<li>在Gemfile里加上<code>bootstrap-sass</code>然后运行bundle</li>
<li>在<code>app/assets/javascripts/application.js</code>加上<code>//= require bootstrap</code></li>
<li>在<code>app/assets/stylesheets/application.css</code>加上<code>*= require bootstrap</code></li>
</ul>


<p>下一步把<code>omniauth-github</code>Gem加进来:
&ndash; 在Gemfile里加上<code>omniauth-github</code>并执行bundle
&ndash; 新建文件<code>config/initializers/omniauth.rb</code>包含以下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rails.application.config.middleware.use OmniAuth::Builder do
</span><span class='line'>  provider :github, ENV['GITHUB_KEY'], ENV['GITHUB_SECRET']
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>关于<code>ENV['GITHUB_KEY']</code>和<code>ENV['GITHUB_SECRET']</code>,需要在github上新建一个application,得到的<code>Client ID</code>和<code>Client Secret</code>就是对应的这两个东西,可以把他们写到<code>~/.bashrc</code>里面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GITHUB_KEY='your client id'
</span><span class='line'>export GITHUB_SECRET='your client secret'</span></code></pre></td></tr></table></div></figure>


<p>别忘了source这个文件或重新打开一个终端让显示生效</p>

<p>还要注意你新建application的时候<code>The full URL to your application's homepage</code>和<code>Your application's callback URL</code>对应的端口需要和你的服务对应,比如我这里测试用rails开的3000端口,那我就可以填<code>http://localhost:3000/auth/github</code>和<code>http://localhost:3000/auth/github/callback</code></p>

<p>下面我们需要在页面上加一个通过github登录的link,我直接写到layout里并加上一些div让bootstrap起作用</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">&lt;</span>body<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;navbar navbar-fixed-top&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;navbar-inner&quot;</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;container&quot;</span><span class="p">&gt;</span>
</span><span class='line'>        <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;user-nav pull-right&quot;</span><span class="p">&gt;</span>
</span><span class='line'>          <span class="p">&lt;</span>%<span class="p">=</span> link_to <span class="s2">&quot;Github Login&quot;</span><span class="p">,</span> <span class="s2">&quot;/auth/github&quot;</span> %<span class="p">&gt;</span>
</span><span class='line'>        <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>现在访问还看不到我们新加的内容,因为没有指定root,rails访问到的还是静态的index页面</p>

<p>演示方便我们把root改为<code>application#index</code>并加上需要的action和view</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>root <span class="s1">&#39;application#index&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> <span class="k">index</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">mkdir</span> app<span class="sr">/views/</span>application/
</span><span class='line'>touch app<span class="sr">/views/</span>application/<span class="k">index</span>.html.erb
</span></code></pre></td></tr></table></div></figure>


<p>现在应该能看到这个link了,点一下如果看类似<code>No route matches [GET] "/auth/github/callback"</code>说明已经去github做验证并把结果返回回来了</p>

<p>下一步我们需要验证完的回调</p>

<p>从上面的错误信息可以看到回调地址是<code>/auth/github/callback</code>, 所以我们在routes中加一行</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">get</span> <span class="s2">&quot;/auth/:provider/callback&quot;</span> <span class="p">=&gt;</span> <span class="s2">&quot;sessions#create&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后建立controller和action</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>rails <span class="k">g</span> controller sessions create
</span></code></pre></td></tr></table></div></figure>


<p>如果你想看看返回的数据什么样子,可以这样写sessions#create</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> create
</span><span class='line'>  raise env[<span class="s1">&#39;omniauth.auth&#39;</span>].to_yaml
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样点登录的link就会把返回的信息显示在页面上</p>

<p>得到返回数据怎么处理就看个人需要了,你可能会想建一个表保存返回的数据, 这里我们建立users表来保存用户的nickname,由于github的nickname就是用户名,是唯一的,但是考虑到以后可能会加入其它的认证如twitter,nickname就可能冲突了,所以我们还加个provider</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>rails <span class="k">g</span> scaffold <span class="nb">User</span> nickname provider
</span><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>有了保存数据的地方,我们就可以处理返回的验证了</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> create
</span><span class='line'>  auth <span class="p">=</span> request.env[<span class="s2">&quot;omniauth.auth&quot;</span>]
</span><span class='line'>  user <span class="p">=</span> <span class="nb">User</span>.find_by_omniauth<span class="p">(</span>auth<span class="p">)</span>
</span><span class='line'>  session[:user_id] <span class="p">=</span> user.id
</span><span class='line'>  redirect_to root_url<span class="p">,</span> :notice <span class="p">=&gt;</span> <span class="s2">&quot;Signed in!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>把<code>find_by_omniauth</code>方法放到了model里,它也很简单,能找到就返回,找不到就创建</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> self.find_by_omniauth<span class="p">(</span>auth<span class="p">)</span>
</span><span class='line'>  user <span class="p">=</span> <span class="nb">User</span>.find_by_provider_and_nickname<span class="p">(</span>auth[<span class="s2">&quot;provider&quot;</span>]<span class="p">,</span> auth[<span class="s2">&quot;info&quot;</span>][<span class="s2">&quot;nickname&quot;</span>]<span class="p">)</span>
</span><span class='line'>  user ? user : <span class="nb">User</span>.create_with_omniauth<span class="p">(</span>auth<span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">def</span> self.create_with_omniauth<span class="p">(</span>auth<span class="p">)</span>
</span><span class='line'>  create<span class="p">!</span> <span class="k">do</span> <span class="p">|</span>user<span class="p">|</span>
</span><span class='line'>    user.provider <span class="p">=</span> auth[<span class="s2">&quot;provider&quot;</span>]
</span><span class='line'>    user.nickname <span class="p">=</span> auth[<span class="s2">&quot;info&quot;</span>][<span class="s2">&quot;nickname&quot;</span>]
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要修改一下layout才可以看到登录成功的提示</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;container&quot;</span> style<span class="p">=</span><span class="s2">&quot;margin-top: 60px;&quot;</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>% flash.each <span class="k">do</span> <span class="p">|</span>name<span class="p">,</span> msg<span class="p">|</span> %<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;alert alert-&lt;%= name == :notice ? &quot;</span>success<span class="s2">&quot; : &quot;</span>error<span class="s2">&quot; %&gt;&quot;</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span><span class="k">a</span> class<span class="p">=</span><span class="s2">&quot;close&quot;</span> data<span class="p">-</span>dismiss<span class="p">=</span><span class="s2">&quot;alert&quot;</span><span class="p">&gt;</span><span class="k">x</span><span class="p">&lt;</span>/<span class="k">a</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span>%<span class="p">=</span> msg  %<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>% <span class="k">end</span> %<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>%<span class="p">=</span> yield %<span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在登录已经成功了,我们还需要修改一下github登录的link,让它登录后显示用户名和logout</p>

<p>首先我们需要定义一个帮助方法来判断用户有没登录</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>class ApplicationController <span class="p">&lt;</span> ActionController::Base
</span><span class='line'>
</span><span class='line'>  protect_from_forgery with: :exception
</span><span class='line'>  helper_method :current_user
</span><span class='line'>
</span><span class='line'>  private
</span><span class='line'>
</span><span class='line'>    <span class="nb">def</span> current_user
</span><span class='line'>      @current_user <span class="p">||=</span> <span class="nb">User</span>.find<span class="p">(</span>session[:user_id]<span class="p">)</span> <span class="k">if</span> session[:user_id]
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后定义一条logout的路由</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">get</span> <span class="s2">&quot;signout&quot;</span> <span class="p">=&gt;</span> <span class="s2">&quot;sessions#destroy&quot;</span><span class="p">,</span> :<span class="k">as</span> <span class="p">=&gt;</span> <span class="s2">&quot;signout&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及对应的Action</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> destroy
</span><span class='line'>  session[:user_id] <span class="p">=</span> nil
</span><span class='line'>  redirect_to root_url<span class="p">,</span> :notice <span class="p">=&gt;</span> <span class="s2">&quot;Signed out!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后修改layout</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;user-nav pull-right&quot;</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>% <span class="k">if</span> current_user %<span class="p">&gt;</span>
</span><span class='line'>    Welcome <span class="p">&lt;</span>%<span class="p">=</span> current_user.nickname %<span class="p">&gt;!</span>
</span><span class='line'>    <span class="p">&lt;</span>%<span class="p">=</span> link_to <span class="s2">&quot;Sign out&quot;</span><span class="p">,</span> signout_path %<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>% <span class="k">else</span> %<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>%<span class="p">=</span> link_to <span class="s2">&quot;Github Login&quot;</span><span class="p">,</span> <span class="s2">&quot;/auth/github&quot;</span> %<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>% <span class="k">end</span> %<span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上这样就算完成了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby/Rails小技巧收集]]></title>
    <link href="http://williamherry.com/blog/2013/07/29/ruby-slash-rails-tips-collection/"/>
    <updated>2013-07-29T11:43:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/29/ruby-slash-rails-tips-collection</id>
    <content type="html"><![CDATA[<p>收集一些当时做的时候花了好多时间去Google,但本身又很短的小问题的答案,大部分来算StackOverflow</p>

<h3>jQuery on的用法</h3>

<p>on的基本用法为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(selector1).on 'event', 'selector2', -&gt;
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>我遇到的问题是对通过ajax加载的部分on不起作用,解决办法是确保selector1不是通过ajax加载的</p>

<h3>simple_form和bootstrap一起使用的问题</h3>

<p>simple_form和bootstrap一起使用的时候我遇到的问题是simple_form生成的html没有加进去bootstrap的Class,看不到bootstrap样式加到table的效果,解决办法是在Gemfile里给simple_form指定版本,Rails 4是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'simple_form', "~&gt; 3.0.0.rc"</span></code></pre></td></tr></table></div></figure>


<p>Rails 3是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'simple_form, "~&gt; 2.1.0"</span></code></pre></td></tr></table></div></figure>


<h3>Rails 4 要使用remote: true的方法执行js需要在action里加上<code>render layout: false</code></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language Notes]]></title>
    <link href="http://williamherry.com/blog/2013/07/22/the-ruby-programming-language-notes/"/>
    <updated>2013-07-22T11:14:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/22/the-ruby-programming-language-notes</id>
    <content type="html"><![CDATA[<ul>
<li>Global variables are prefixed with $</li>
<li>Instance variables are prefixed with @</li>
<li>Class variables are prefixed with @@</li>
<li>Constant begin with a capital letter</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/[Rr]uby/   # Matches "Ruby" or "ruby"
</span><span class='line'>/\d{5}/     # Matches 5 consecutive digits
</span><span class='line'>1..3        # All x where 1 &lt;= x &lt;= 3 # has equal both side
</span><span class='line'>1...3       # All x where 1 &lt;= x &lt; 3</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Ruby case statement matches its expression against each of the possible cases using <code>===</code></p></li>
<li><p>Ruby&rsquo;s strings are mutable, call freeze method to prevent any future modifications</p></li>
<li><p>In Ruby world, only nil and false are false, anything else are true</p></li>
<li><p><code>print</code> is almost same with <code>puts</code>, except it does not append a newline</p></li>
<li><p><code>p</code> almost same with <code>puts</code>, except it use <code>inspect</code> rather than <code>to_s</code></p></li>
<li><p>lexical</p></li>
<li>punctuation</li>
<li>syntactic</li>
<li><p>arithmetic</p></li>
<li><p>All numeric objects are immutable</p></li>
<li><p>Integer division by zero causes a ZeroDivisionError to be thrown.</p></li>
<li>Floating-point division by zero does not cause an error; it simple returns the value Infinity</li>
<li><p>0.0/0.0 => NaN</p></li>
<li><p><code>4**3**2</code> is same as <code>4**9</code> not <code>64**2</code></p></li>
<li><p>even = (x[0] == 0)  # A number is even if the least-significat bit is 0</p></li>
<li><p>&lsquo;a\b&rsquo; == &lsquo;a\b&rsquo;</p></li>
<li><p>money = &ldquo;\u{20AC 20 A3 20 A5}&rdquo; # => &ldquo;€ £ ¥&rdquo;</p></li>
<li><p>Run system command</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`ls`
</span><span class='line'>%x[ls]</span></code></pre></td></tr></table></div></figure>


<p>?A  # Character literal for the  ASCII character A
/&ldquo;  # Character literal for the  ASCII character &rdquo;
/?  # Character literal for the  ASCII character ?
not need any more</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = 0;
</span><span class='line'>"#{a=a+1} " * 3   # returns "1 1 1", not "1 2 3"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s = "hello"
</span><span class='line'>s[index, length]
</span><span class='line'>s[0, 2] # "he"
</span><span class='line'>s[start_index..end_index]   # include end_index
</span><span class='line'>s[start_index...end_index]  # not include end_index
</span><span class='line'>s[/[aeiou]/] = '*'          # replace first vowel with an asterisk</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s = "¥1000"
</span><span class='line'>s.each_char { |x| print "#{x} " } # Prints "¥ 1 0 0 0". Ruby 1.9
</span><span class='line'>0.upto(s.size-1) { |i| print "#{s[i]} " }  # Inefficient with multibyte chars</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>words = %w[this is a test]  # Same as ['this', 'is', 'a', 'test']</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = [1, 1, 2, 2, 3, 3, 4]
</span><span class='line'>b = [5, 5, 4, 4, 3, 3, 2]
</span><span class='line'>a | b  # [1, 2, 3, 4, 5]: duplicates are removed
</span><span class='line'>b | a  # [5, 4, 3, 2, 1]: elements are the same, but order is different
</span><span class='line'>a & b  # [2, 3, 4]
</span><span class='line'>b & a  # [4, 3, 2]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>equality</p></li>
<li><p><code>equal?</code> method is defined by Object to test whether two values refer to exactly the same object</p></li>
<li><p><code>==</code> in Object is just alias to equal? but most class redefine it</p></li>
<li><p><code>!=</code> simple use <code>==</code> and inverts the result</p></li>
<li><p><code>eql?</code> strict version of <code>==</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 == 1.0    # true: Fixnum and Float objects can be ==
</span><span class='line'>1.eql?(1.0) # false: but they are never eql!</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>===</code> most use in case statement and:

<ul>
<li>Many classes, is the same as ==</li>
<li>Range to test whether a value falls within the range</li>
<li>Regexp to test whether a string matches the regular expression</li>
<li>Class to test whether an object is an instance of that class</li>
<li>In Ruby 1.9 Symbol to return true if the righthand operand is the same symbol as the left or if it is a string holding the same text</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1..10) === 5  # true: 5 is in the range 1..10
</span><span class='line'>/\d+/ === "123" # true: the string matches the regular expression
</span><span class='line'>String === "s"  # true: "s" is an instance of the class String
</span><span class='line'>:s === "s"      # true in Ruby 1.9</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>=~</code> pattern match(like Regexp)</p></li>
<li><p><code>&lt;=&gt;</code></p>

<ul>
<li>Return -1 if its left operand is less than its right operand</li>
<li>Return 0 if the two operands are equal</li>
<li>Return 1 if the left operand is greater than the right operand</li>
<li>Return nil if can not meaningfull compared</li>
</ul>
</li>
<li><p>explicit</p></li>
<li><p>to_s:
return a human-readable representation of the object, suitable for end users</p></li>
<li>inspect:
is intended for debugging use, and should return a representation that is helpful to Ruby developers</li>
<li><p>default inspect method, inherited from Object, simple calls to_s</p></li>
<li><p>implicit</p></li>
<li>invocation</li>
<li>abbreviated</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># splat (*)
</span><span class='line'>x, y = 1, *[2, 3] # Same as x, y, z = 1, 2, 3
</span><span class='line'>x, *y = 1, 2, 3   # x = 1; y = [2, 3]
</span><span class='line'>x, *y = 1, 2      # x = 1; y = [2]
</span><span class='line'>x, *y = 1         # x = 1; y = []</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ruby 1.9 only
</span><span class='line'>*x, y = 1, 2, 3   # x = [1, 2]; y = 3
</span><span class='line'>*x, y = 1, 2      # x=[1]; y = 2
</span><span class='line'>*x, y = 1         # x = []; y = 1
</span><span class='line'>
</span><span class='line'>x, y *z = 1, *[2, 3, 4] # x = 1;y = 2; z=[3,4]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>&amp;&amp;</code> has higher precedence that <code>||</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 || 2 && nil  # =&gt; 1</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>and, or and not operators are low-precedence versions of &amp;&amp;, ||, and !
they have lower precedence that the assignment operator</p></li>
<li><p>and and or have the same precedence and not is just slightly higher</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x || y && nil   # && is performed first   =&gt; x
</span><span class='line'>x or y and nil  # evaluated left-to-right =&gt; nil</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>?:</code> operator is right-associative(same as **)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a ? b : c ? d : e     # This expression ..
</span><span class='line'>a ? b : (c ? d : e)   # is evaluated like this..
</span><span class='line'>(a ? b : c) ? d : e   # NOT like this</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The loop variable or variables of a for loop are not local to the loop; they remain defined even after the loop exit. Similarly, new variables defined within the body of the loop continue to exist after the loop exits.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>squares = [1,2,3].collect {|x| x*x}   # =&gt; [1,4,9]
</span><span class='line'>evens = (1..10).select {|x| x%2 == 0} # =&gt; [2,4,6,8,10]
</span><span class='line'>odds = (1..10).reject {|x| x%2 == 0}  # =&gt; [1,3,5,7,9]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = [2, 5, 3, 4]
</span><span class='line'>sum = data.inject { |sum, x| sum + x }     # =&gt; 14    (1+5+3+4)
</span><span class='line'>floatprod = data.inject(1.0) { |p,x| p*x } # =&gt; 120.0 (1.0*2*5*3*4)
</span><span class='line'>max = data.inject { |m, x| m&gt;x ? m : x }   # =&gt; 5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>implicit</li>
<li><p>fundamental</p></li>
<li><p>use return in a block will cause the method that use yield to call the block exit</p></li>
<li><p>return value in block should use next</p></li>
<li><p>blocks defined a new variable scope: variables created within a block exist only within that block and are undefined outside of the block</p></li>
<li><p>the local variables in a method are available to any blocks within that method. so if a block assigns a value to a variable that is already defined outside of the block, this does not create a new block-local variable but instead assigns a new value to the already-existing variable.</p></li>
<li><p>invocation</p></li>
<li><p>an important difference between block parameters and method parameters is that block parameters are not allowed to have default values assigned as method parameters are.(seems not any more)</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1,2,3].each {|x,y=10| print x*y }  # SyntaxError!</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>intuitive</p></li>
<li><p>return always causes the enclosing method to return. the enclosing method, also called the lexically enclosing method, is the method that the block appears inside of when you look at the source code</p></li>
<li><p>note that unlike return, break never causes the lexically enclosing method to return. break can only appear within a lexically enclosing loop or within a block. using it in any other context causes a LocalJumpError</p></li>
<li><p>manipulate</p></li>
<li><p>represent</p></li>
<li><p>An important feature of procs and lambdas is that they are closures: they retain access to the local variables that were in scope when they were defined, even then the proc or lambda is invoked from a different scope</p></li>
<li><p>subtle</p></li>
<li>invocation</li>
<li><p>respectively</p></li>
<li><p>Ruby implementations typically treat Fixnum and Symbol values as immediate values rather than as true object references. For this reason, singleton methods may not be defined on Fixnum and Symbol objects. For consistency, singletons are also prohibited on other Numberic objects.</p></li>
<li><p>Interestingly, undef can be used to undefine inherited method, without affecting the definition of the method in the class from which it is inherited.</p></li>
<li><p>It cannot be used to undefine a singleton method in the way that def can be used to define such a method.</p></li>
<li><p>punctuation</p></li>
<li>unary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias aka also_known_as   # alias new_name existing_name</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def hello
</span><span class='line'>  puts 'Hello World'
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>alias original_hello hello
</span><span class='line'>
</span><span class='line'>def hello
</span><span class='line'>  puts 'Your attention please'
</span><span class='line'>  original_hello
</span><span class='line'>  puts 'This has been a test'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>overload</li>
<li>ambiguous</li>
<li>wrinkle</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def suffix(s, index=s.size-1)
</span><span class='line'>  s[index, s.size-index]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>In Ruby 1.8, method parameters with default values must appear after all ordinary parameters in the parameter list. Ruby 1.9 relaxes this restriction and allows ordinary parameters to appear after parameters with defaults. It still requires all parameters with defaults to be adjacent in the parameter list &ndash; you can&rsquo;t declare two parameters with default values with an ordinary parameter between them, for example.</p></li>
<li><p>No more than one parameter may be prefixed with an *. In Ruby 1.8, this parameter must appear after all ordinary parameters and after all parameters with defaults specified. It should be the last parameter of the method, unless the method also has a parameter with an &amp; prefix. In Ruby 1.9, a parameter with an * prefix must still appear after any parameters with defaults specified, but it may be followed by additional ordinary parameters. It must also still appear before any &amp;-prefixed parameter.</p></li>
<li><p>anonymity</p></li>
<li><p>Blocks are syntactic structures in Ruby; they are not objects, and cannot be manipulated as objects.</p></li>
<li>It is possible, however, to create an object that represents a block. Depending on how the object is created, it is called a proc or a lambda</li>
<li><p>Procs have block-like behavior and lambdas have method-like behavior. Both, however, are instances of class Proc.</p></li>
<li><p>Proc.new => procs</p></li>
<li>Kernel.lambda => lambda</li>
<li>Kernel.proc => alias of lambda in Ruby 1.8</li>
<li>Kernel.proc => alias of Proc.new in Ruby 1.9</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>succ = lambda {|x| x+1}  # Ruby 1.8 lambda
</span><span class='line'>succ = -&gt;(x){ x+1 }      # Ruby 1.9 lambda</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This lambda takes 2 args and declares 3 local vars
</span><span class='line'>f = -&gt;(x,y; i,j,k) { ... }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zoom = -&gt;(x,y,factor=2) { [x*factor, y*factor] }   # only on Ruby 1.9</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>succ = -&gt;x { x+1 }
</span><span class='line'>f = -&gt; x,y; i,j,k { ... }
</span><span class='line'>zoom = -&gt;x,y,factor=2 { [x*factor, y*factor] }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Proc Equality &ndash; The <code>==</code> method only returns true if on Proc is a clone or duplicate of the other;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = lambda {|x| x*x }
</span><span class='line'>q = p.dup
</span><span class='line'>q == p                      # =&gt; true: the two procs are equal
</span><span class='line'>p.object_id == q.object_id  # =&gt; false: they are not the same object
</span><span class='line'>
</span><span class='line'>- A proc is the object form of a block, and it behaves like a block.
</span><span class='line'>- A lambda has slightly modified behavior and behaves more like a mthod that a block.
</span><span class='line'>
</span><span class='line'>- The return statement in a block does not just return from the block to the invoking iterator, it returns from the method that invoked the interator.
</span></code></pre></td></tr></table></div></figure>


<p>def test
  puts &ldquo;entering method&rdquo;
  1.times { puts &ldquo;entering block&rdquo;; return }  # Makes test method return
  puts &ldquo;exiting method&rdquo;   # This line is never executed
end
test</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- A proc is like a block, so if you call a proc that executes a return statement, it attempts to return from the method that encloses the block that was converted to the proc.
</span></code></pre></td></tr></table></div></figure>


<p>def test
  puts &ldquo;entering method&rdquo;
  p = Proc.new { puts &ldquo;entering proc&rdquo;; return }
  p.call                # Invoking the proc makes method return
  puts &ldquo;exiting method&rdquo; # This line is never executed
end
test</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- Using a return statement in a proc is tricky, however, because procs are ofter passed around between methods. By the time a proc is invoked, the lexically enclosing method may already have returned:
</span></code></pre></td></tr></table></div></figure>


<p>def procBuilder(message)            # Create and return a proc
  Proc.new { puts message; return } # return returns from procBuilder
  # but procBuilder has already returned here!
end</p>

<p>def test
  puts &ldquo;entering method&rdquo;
  p = procBuilder(&ldquo;entering proc&rdquo;)
  p.call                # Prints &ldquo;entering proc&rdquo; and raises LocalJumpError!
  puts &ldquo;exiting method&rdquo; # This line is never executed
end
test</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- A return statement in a lambda, therefore, returns from the lambda itself, not from the method that surrounds the creation site of the lambda:
</span></code></pre></td></tr></table></div></figure>


<p>def test
  puts &ldquo;entering method&rdquo;
  p = lambda { puts &ldquo;entering lambda&rdquo;; return }
  p.call                  # Invoking the lambda does not make the method return
  puts &ldquo;exiting method&rdquo;   # This line <em>is</em> executed now
end
test</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- The fact that return in lambda only returns from the lambda itself means that we never have to worry about LocalJumpError
</span></code></pre></td></tr></table></div></figure>


<p>def lambdaBuilder(message)            # Create and return a proc
  lambda { puts message; return }     # return returns from lambda
  # but procBuilder has already returned here!
end</p>

<p>def test
  puts &ldquo;entering method&rdquo;
  p = lambdaBuilder(&ldquo;entering lambda&rdquo;)
  p.call                # Prints &ldquo;entering lambda&rdquo;
  puts &ldquo;exiting method&rdquo; # This line is executed
end
test</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- A top-level next statement works the same in a block, proc, or lambda: ti causes the yield statement or call method that invoked the block, proc, or lambda to return. If next is followed by an expression, then the value of that expression becomes the rturn value of the block, proc, or lambda.
</span><span class='line'>
</span><span class='line'>- redo also works the same in procs and lambdas: it transfers control back to the beginning of the proc or lambda.
</span><span class='line'>
</span><span class='line'>- retry is never allowed in procs or lambdas: using it always results in a LocalJumpError.
</span><span class='line'>
</span><span class='line'>- raise behaves the same in blocks, procs, and lambdas. Exceptions always propagate up the call stack. If a block, proc, or lambda raises an exception and there is no local rescue clause, the exception first propagates to the method that invoked the block with yield or that invoked the proc or lambda with call.
</span><span class='line'>
</span><span class='line'>- Argument passing to procs and lambdas
</span><span class='line'>  - The yield statement uses yield semantics
</span><span class='line'>  - method invocation uses invocation semantics
</span><span class='line'>  - Yield semantics are similar to parallel assignment
</span><span class='line'>  - invoking a proc uses yield semantics
</span><span class='line'>  - invoking a lambda uses invocation semantics
</span></code></pre></td></tr></table></div></figure>


<p>p = Proc.new {|x,y| print x,y }
p.call(1)       # x,y=1:     nil used for missing rvalue:  Prints 1nil
p.call(1,2)     # x,y=1,2:   2 lvalues, 2rvalues:          Print 12
p.call(1,2,3)   # x,y=1,2,3: extra rvalues discarded:      Print 12
p.call([1,2])   # x,y=[1,2]: array automatically unpacked: Print 12</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>```
</span><span class='line'>l = lambda {|x,y| print x,y }
</span><span class='line'>l.call(1,2)     # This works
</span><span class='line'>l.call(1)       # Wrong number of arguments
</span><span class='line'>l.call(1,2,3)   # Wrong number of arguments
</span><span class='line'>l.call([1,2])   # Wrong number of arguments
</span><span class='line'>l.call(*[1,2])  # Works: explicit splat to unpack the array</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In Ruby, procs and lambdas are closures.</li>
<li>An object that is both an invocable function and a variable binding for that function.</li>
<li><p>When you create a proc or a lambda, the resulting Proc object holds not just the executable block but also bindings for all the variables used by the block.</p></li>
<li><p>One important difference between Method objects and Proc objects is that Method objects are not closures.</p></li>
<li><p>encapsulated</p></li>
<li><p>In addition to being automatically invoked by Point.new, the initialize method is automatically made private. An object can call initialize on itself, but you cannot explicitly call initialize on p to reinitialize its state.</p></li>
<li><p>coerce</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Point::NEGATIVE_UNIT_X = Point.new(-1,0)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Class Instance Variables</p>

<ul>
<li>An instance variable used inside a class definition but outside an instance method definition</li>
<li>Class instance variables cannot be used from instance methods</li>
</ul>
</li>
<li><p>Define Class</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point
</span><span class='line'>  ...
</span><span class='line'>  def Point.sum(*points)
</span><span class='line'>  ...
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point
</span><span class='line'>  ...
</span><span class='line'>  def self.sum(*points)
</span><span class='line'>    ...
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class &lt;&lt; Point
</span><span class='line'>  def sum(*points)
</span><span class='line'>    ...
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point
</span><span class='line'>  class &lt;&lt; self
</span><span class='line'>    ...
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Method are normally public unless they are explicitly declared to be private or protected. One exception if the initialize method, which is always implicityly private.</p></li>
<li><p>Another exception is any &ldquo;global&rdquo; method declared outside of a class definition &mdash; those methods are defined as private instance methods of Object.</p></li>
<li><p>A public method can be invoked from anywhere &mdash; where are no restrictions on its use.</p></li>
<li><p>A private method is internal to the implementation of a class, and it can only be called by other instance methods of the class (or, as we&rsquo;ll see later, its subclasses).</p></li>
<li><p>Private methods are implicitly invoked on self, and may not be explicitly invoked on an object.</p></li>
<li><p>If m is a private method, then you must invoke it in functional style as m. You cannot write o.m or even self.m</p></li>
<li><p>A protected method is like a private method in that it can only be invoked from within the implementation of a class or its subclasses. It differs from a private method in that it may be explicit invocatioin on self.</p></li>
<li><p>A protected method can be used, for example, to define an accessor that allows instances of a class to share internal state with each other, but does not allow users of the class to access that state.</p></li>
<li><p>Protected methods are the least commonly defined and also the most difficult to understand. The rule about when a protected method can be invoked can be more formally described as follows: a protected method defined by a class C may be invoked on an object o by a method in the object p if and only if the classes of o and p are both subclasses of, or equal to, the class C.</p></li>
<li><p>One of the important things to understand about object-oriented programming and subclassing is that when methods are invoked, they are looked up dynamically so that the appropriate definition or redefinition of the method is found. That is, method invocations are not bound statically at the time they are parsed, but rather, are looked up at the time they are executed.</p></li>
<li><p>If you use super as a bare keyword &mdash; with no arguments and no parentheses &mdash; then all of the arguments that were passwd to the current method are passed to the superclass method.</p></li>
<li><p>Ruby&rsquo;s instance variables are not inherited and have nothing to do with the inheritance mechanism. The reason that they sometimes appear to be inherited is that instance variables are created by the methods that first assign values to them, and those methods are often inherited or chainned.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point3D &lt; Point
</span><span class='line'>  def initialize(x,y,z)
</span><span class='line'>    super(x,y)
</span><span class='line'>    @z = z;
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def to_s
</span><span class='line'>    "(#@x, #@y, #@z)"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>In this code, Point3D defines an initialize method that chains tothe initialize method of its superclas.. The chained method assigns values to the variables @x and @y, which makes those variables come into existence for a particular instance of Point3D</p></li>
<li><p>Class variables are inherited</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A
</span><span class='line'>  @@value = 1
</span><span class='line'>  def A.vaue; @@value; end
</span><span class='line'>end
</span><span class='line'>print A.value
</span><span class='line'>class B &lt; A; @@value = 2; end
</span><span class='line'>print A.value
</span><span class='line'>class C &lt; A; @@value = 3; end
</span><span class='line'>print B.value</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>The important difference between constants and methods is that constants are looked up in the lexical scope of the place they are used before they are looked up in the inheritance hierarchy</p></li>
<li><p>Another way that new objects come into existence is as a result of the dup and clone methods. These methods allocate a new instance of the class of the object on whhich they are invoked. They then copy all the instance variables and the taintedness of the receiver object to the newly allocated object.</p></li>
<li><p>clone takes this copying a step further that dup &mdash; it also copies singleton methods of the receiver object and freezes the copy object if the original is frozen.</p></li>
<li><p>A third way that objects are created is when Marshal.load is called to re-create object previously marshaled (or &ldquo;serialized&rdquo;) with Marshal.dump.</p></li>
<li><p>A singleton is a class that has only a single instance</p></li>
<li><p>A singleton method is a method added to a single object rather than to a class of objects</p></li>
<li><p>A module cannot be instantiated, and it cannot be subclassed</p></li>
<li><p>Modules are used as namespeces and as mixins</p></li>
<li><p>Just as a class object is an instance of the Class class, a module object is an instance of the Module class. Class is a subclass of Module. This means that all classes are modules, but not all modules are classes.</p></li>
<li><p>Class can be used as namespaces, just as modules can. Class cannot, however, be used as mixins.</p></li>
<li><p>The inclusion of a module affects the type-checking method is_a? and the switch-equality operator ===. For example, String mixes in the Comparable module and, in Ruby 1.8, also mixes in the Enumerable module:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"text".is_a? Comparable  # =&gt; true
</span><span class='line'>Enumerable === "text"    # =&gt; true in Ruby 1.8, false in 1.9</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Note that instance_of? only checks the class of its receiver, not superclasses or modules, so the following is false:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"text".instance_of? Comparable  # =&gt; false</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Although every class is a module, the include method does not allow a class to be included within another class. The arguments to include must be modules declared with module, not classes</p></li>
<li><p>If you want to create a module like Math or Kernel (after included, call method without module name), define you methods as instance methods of the module. Then use module_function to convert those methods to &ldquo;module functions.&rdquo;</p></li>
<li><p>In addition to loading source code, require can also load binary extensions to Ruby.</p></li>
<li><p>load expects a complete filename including an extension. require is usually passed a library name, with no extension, rather than a filename. In that case, it searches for a file that has the library name as its base name and an appropriate source or native library extension. If a directory contains both an .rb source file and a binary extension file, require will load the source file instead of the binary file.</p></li>
<li><p>load can load the same file multiple times. require tries to prevent multiple loads of the same file. require keeps track of the files that have been loaded by appending them to the global array $&ldquo; (also known as $LOADED_FEATURES). load does not do this.</p></li>
<li><p>load loads the specified file at the current $SAFE level. require loads the specified library with $SAFE set to 0, even if the code that called require has a higher value for that variable. In theory, therefore, it should be safe for require to load files with a reduced $SAFE level.</p></li>
<li><p>Files loaded with load or require are executed in a new top-level scope that is different from the one in which load or require was invoked. The loaded file can see all global variables and constants that have been defined at the time it is loaded, but it does not have access to the local scope from which the load was initiated</p></li>
<li><p>The local variables defined in the scope from which load or require is invoked are not visible to the loaded file.</p></li>
<li>Any local variables created by the loaded file are discarded once the load is complete; they are never visible outside the file in which they are defined.</li>
<li>At the start of the loaded file, the value of self is always the main object, just as it is when the Ruby interpreter starts running. That is, invoking load or require whthin a method invocation does not propagate the receiver object to the loaded file.</li>
<li><p>The current module nesting is ignored within the loaded file. You cannot, fir example, open a class and load a file of method definitions. The file will be precessed in a top-level scope, not inside any class or module.</p></li>
<li><p>Ruby method lookup or method name resolution ( o.m )</p>

<ul>
<li>First, it checkes the eigenclass of o for singleton methods name m.</li>
<li>If no method m is found in the eigenclass, Ruby searches the class of o for an instance method named m.</li>
<li>If no method m is found in the class, Ruby searches the instance methods of any modules included by the class of o. If that class includes more that one module, then they are searched in the reverse of the order in which they were included. That is the most recently included module is searched first.</li>
<li>If no instance method m is found in the class of o or in its modules, then the search moves up the inheritance hierarchy to the superclass. Steps 2 and 3 are repeated for each class in the inheritance hierarchy until each ancestor class and its included modules have ben searched.</li>
<li>If no method named m is found after completing the search, then a method named method_missing is invoked instand. In order to find an appropriate definition of this method, the name resolution algorithm start over at step 1. The Kernel module a default implementation of method_messing, so this second pass of name resolution is guranteed to succeed.</li>
</ul>
</li>
<li><p>Class objects are special: they have superclasses.</p></li>
<li><p>The eigenclasses of class objects are also special: they have superclasses, too.</p></li>
<li><p>refection</p></li>
<li>introspection</li>
<li>examine</li>
<li><p>malicious</p></li>
<li><p>Note that eval evaluates its code in a temporary scope. eval can alter the value of instance variables that already exist. But any new instance variables it defines are local to the invocation of eval and cease to exist when it returns. (It is as if the evaluated code is run in the body of a block &mdash; variables local to a block do not exist outside the block)</p></li>
<li><p>synonym</p></li>
<li><p>It is important to understand that define_method is private. You must be inside the class or module you want to use it on in order to call it:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Add an instance method named m to class with body b
</span><span class='line'>def add_method(c, m, &b)
</span><span class='line'>  c.class_eval {
</span><span class='line'>    define_method(m, &b)
</span><span class='line'>  }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>add_method(String, :greet) { "Hello, " + self }
</span><span class='line'>
</span><span class='line'>"world".greet # =&gt; "Hello, world"</span></code></pre></td></tr></table></div></figure>


<p>t = Time.utc(2000, 12, 31, 23, 59, 59, 999999)
t.year   # => 2000</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日期时间选择插件使用]]></title>
    <link href="http://williamherry.com/blog/2013/07/21/datetimepicker-demo/"/>
    <updated>2013-07-21T23:22:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/21/datetimepicker-demo</id>
    <content type="html"><![CDATA[<p>以前做过这样的东西,花了好多时间,因为要选择到底用那个插件,还有好多插件要只有日期没有时间,今天做这样的东西又花了不少时间,决定记录下来,下一次就简单多了</p>

<p>我使用的是<code>jQuery</code>的<code>datepicker</code>加上<a href="https://github.com/trentrichardson/jQuery-Timepicker-Addon">jQuery-Timepicker-Addon</a></p>

<p>示例代码在这里: <a href="https://github.com/williamherry/datetimepicker-demo">datetimepicker-demo</a>,懒得看详细的步骤可以直接看代码</p>

<p>效果类似这样:</p>

<p><img src="http://williamherry.com/images/datetimepicker.png"></p>

<ul>
<li>首先创建项目</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new datetimepicker-demo</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后我创建了一个叫activity的scaffold,插件会用到start_at这个字段上</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g scaffold activity title content:text start_at:datetime
</span><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>下来我们要把需要的插件加进来,jquery-ui我用一个非常方便的gem: <a href="https://github.com/joliss/jquery-ui-rails">jquery-ui-rails</a>, 只要加到<code>Gemfile</code>里<code>gem jquery-ui-rails</code>,运行<code>bunder</code>就行了</p></li>
<li><p><a href="https://github.com/trentrichardson/jQuery-Timepicker-Addon">jQuery-Timepicker-Addon</a>我是自己下载下来把需要的文件复制到项目的vender目录下,需要用到三个文件:<code>jquery-ui-timepicker-addon.js</code>, <code>jquery-ui-timepicker-addon.css</code>和<code>i18n</code>目录下的<code>jquery-ui-timepicker-zh-CN.js</code>, js文件复制到<code>vendor/assets/javascripts/</code>, css文件复制到<code>vendor/assets/stylesheets/</code></p></li>
<li><p>需要的文件都加进来了,下面我们需要在include他们</p></li>
</ul>


<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="sr">//</span><span class="p">=</span> require jquery
</span><span class='line'><span class="sr">//</span><span class="p">=</span> require jquery.ui.datepicker
</span><span class='line'><span class="sr">//</span><span class="p">=</span> require jquery.ui.slider
</span><span class='line'><span class="sr">//</span><span class="p">=</span> require jquery<span class="p">-</span>ui<span class="p">-</span>timepicker<span class="p">-</span>addon
</span><span class='line'><span class="sr">//</span><span class="p">=</span> require jquery<span class="p">-</span>ui<span class="p">-</span>timepicker<span class="p">-</span>zh<span class="p">-</span>CN
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/assets/stylesheets/application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'> *<span class="p">=</span> require jquery.ui.datepicker
</span><span class='line'> *<span class="p">=</span> require jquery.ui.slider
</span><span class='line'> *<span class="p">=</span> require jquery<span class="p">-</span>ui<span class="p">-</span>timepicker<span class="p">-</span>addon
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>准备工作都做完了,下来就是使用了</li>
</ul>


<figure class='code'><figcaption><span>app/views/activities/_form.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>  <span class="p">&lt;</span>div class<span class="p">=</span><span class="s2">&quot;field&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>%<span class="p">=</span> <span class="k">f</span>.label :start_at %<span class="p">&gt;&lt;</span><span class="k">br</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>%<span class="p">=</span> <span class="k">f</span>.text_field :start_at<span class="p">,</span> :id <span class="p">=&gt;</span> <span class="s2">&quot;datetimepicker&quot;</span> %<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>/div<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/assets/javascripts/activities.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>$ <span class="p">-&gt;</span>
</span><span class='line'>  $<span class="p">(</span><span class="s2">&quot;#datetimepicker&quot;</span><span class="p">)</span>.datetimepicker
</span><span class='line'>    stepMinute: <span class="m">5</span>
</span><span class='line'>    dateFormat: <span class="s2">&quot;yy-mm-dd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多参数和例子可以看<a href="http://trentrichardson.com/examples/timepicker/#tp-options">这里</a></p>

<p>这样就算完成了,但是虽然加了那个i18n的文件,月和周的显示还是英文, 这可以直接在js文件里加,也可以在<code>vendor/assets/javascripts/jquery-ui-timepicker-zh-CN.js</code>中加上这两行</p>

<figure class='code'><figcaption><span>app/assets/javascripts/activities.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>  monthNames: [<span class="s1">&#39;一月&#39;</span><span class="p">,</span> <span class="s1">&#39;二月&#39;</span><span class="p">,</span> <span class="s1">&#39;三月&#39;</span><span class="p">,</span> <span class="s1">&#39;四月&#39;</span><span class="p">,</span> <span class="s1">&#39;五月&#39;</span><span class="p">,</span> <span class="s1">&#39;六月&#39;</span><span class="p">,</span> <span class="s1">&#39;七月&#39;</span><span class="p">,</span> <span class="s1">&#39;八月&#39;</span><span class="p">,</span> <span class="s1">&#39;九月&#39;</span><span class="p">,</span> <span class="s1">&#39;十月&#39;</span><span class="p">,</span> <span class="s1">&#39;十一月&#39;</span><span class="p">,</span> <span class="s1">&#39;十二月&#39;</span>]<span class="p">,</span>
</span><span class='line'>  dayNamesMin: [<span class="s1">&#39;周日&#39;</span><span class="p">,</span> <span class="s1">&#39;周一&#39;</span><span class="p">,</span> <span class="s1">&#39;周二&#39;</span><span class="p">,</span> <span class="s1">&#39;周三&#39;</span><span class="p">,</span> <span class="s1">&#39;周四&#39;</span><span class="p">,</span> <span class="s1">&#39;周五&#39;</span><span class="p">,</span> <span class="s1">&#39;周六&#39;</span>]<span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<h3>资源:</h3>

<ul>
<li><a href="https://github.com/joliss/jquery-ui-rails">jquery-ui-rails</a></li>
<li><a href="http://jqueryui.com/datepicker/">jquery datepicker</a></li>
<li><a href="https://github.com/trentrichardson/jQuery-Timepicker-Addon">jQuery Timepicker Addon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[只允许上海的用户注册]]></title>
    <link href="http://williamherry.com/blog/2013/07/10/allow-ip-from-shanghai-do-something/"/>
    <updated>2013-07-10T13:33:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/10/allow-ip-from-shanghai-do-something</id>
    <content type="html"><![CDATA[<p>刚开始听到老板说这个需求的时候,我还傻呼呼一直在想要怎么得到所有上海的IP地址,都打算试着写爬虫去爬这些数据,事实上我只要判断一个客户端的IP是不是属于上海就行了,而这个动作可以由一些第三方提供的API来做,像百度就有提供这个的服务</p>

<p>转过弯来就比较简单了,我的方法在<code>app/controller/application_controller.rb</code>文件里加一个helper方法</p>

<figure class='code'><figcaption><span>app/controller/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>class ApplicationController <span class="p">&lt;</span> ActionController::Base
</span><span class='line'>  helper_method :is_shanghai_ip?
</span><span class='line'>...
</span><span class='line'>  <span class="nb">def</span> is_shanghai_ip?<span class="p">(</span>ip<span class="p">)</span>
</span><span class='line'>    uri <span class="p">=</span> <span class="s2">&quot;http://api.map.baidu.com/location/ip?ak=your_api_key&amp;ip=#{ip}&amp;coor=bd09ll&quot;</span>
</span><span class='line'>    resp <span class="p">=</span> Net::HTTP.get_response<span class="p">(</span>URI.parse<span class="p">(</span>uri<span class="p">))</span>
</span><span class='line'>    data <span class="p">=</span> resp.body
</span><span class='line'>    result <span class="p">=</span> JSON.parse<span class="p">(</span>data<span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> false <span class="k">if</span> result[<span class="s1">&#39;status&#39;</span>] <span class="p">==</span> <span class="m">1</span>
</span><span class='line'>    result[<span class="s1">&#39;content&#39;</span>][<span class="s1">&#39;address&#39;</span>] <span class="p">==</span> <span class="s2">&quot;上海市&quot;</span> ? true : false
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>...
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在你要做控制的action中调用这个方法,比如我们要限制只有上海的用户可以注册</p>

<figure class='code'><figcaption><span>app/controller/users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">def</span> sign_up
</span><span class='line'>  unless is_shanghai_ip?<span class="p">(</span>request.remote_ip<span class="p">)</span>
</span><span class='line'>    redirect_to <span class="s2">&quot;/about/us&quot;</span> and <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  ...
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>百度提供的这个服务的地址是: <a href="http://developer.baidu.com/map/ip-location-api.htm">http://developer.baidu.com/map/ip-location-api.htm</a></p>

<p>另外有一个叫<code>geocoder</code>的gem非常强大,它直接在<code>Rack::Request</code>里塞一个<code>location</code>的方法,你可以直接在controller里这样调用</p>

<figure class='code'><figcaption><span>app/controller/users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>city <span class="p">=</span> request.location.city
</span><span class='line'>country <span class="p">=</span> request.location.country_code
</span></code></pre></td></tr></table></div></figure>


<p>此外它还有一些非常强大的功能如查找经纬度,查找附近,查找距离等等,更详细的信息可以访问它的<a href="http://www.rubygeocoder.com/">官方网站</a>, <a href="http://railscasts.com/episodes/273-geocoder">RailsCast</a>还有一期是介绍它的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE10下图片灰度处理]]></title>
    <link href="http://williamherry.com/blog/2013/07/09/image-grayscale-for-ie10/"/>
    <updated>2013-07-09T17:18:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/07/09/image-grayscale-for-ie10</id>
    <content type="html"><![CDATA[<p>其它浏览器或版本的图片灰度处理可以看<a href="http://www.karlhorky.com/2012/06/cross-browser-image-grayscale-with-css.html">这里</a></p>

<p>上面的方法对IE10是没有效果的,Google了好久发现只有用svg才对IE10才有作用,想知道svg是什么请看<a href="http://www.w3school.com.cn/svg/svg_intro.asp">这里</a></p>

<p>下面的代码就可以对图片做灰度的处理</p>

<figure class='code'><figcaption><span>~/tmp/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">&lt;</span>svg xmlns<span class="p">=</span><span class="s2">&quot;http://www.w3.org/2000/svg&quot;</span> id<span class="p">=</span><span class="s2">&quot;svgroot&quot;</span> viewBox<span class="p">=</span><span class="s2">&quot;0 0 100 100&quot;</span> width<span class="p">=</span><span class="s2">&quot;100&quot;</span> height<span class="p">=</span><span class="s2">&quot;100&quot;</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>defs<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>filter id<span class="p">=</span><span class="s2">&quot;filtersPicture&quot;</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span>feComposite result<span class="p">=</span><span class="s2">&quot;inputTo_38&quot;</span> <span class="k">in</span><span class="p">=</span><span class="s2">&quot;SourceGraphic&quot;</span> in2<span class="p">=</span><span class="s2">&quot;SourceGraphic&quot;</span> operator<span class="p">=</span><span class="s2">&quot;arithmetic&quot;</span> k1<span class="p">=</span><span class="s2">&quot;0&quot;</span> k2<span class="p">=</span><span class="s2">&quot;1&quot;</span> k3<span class="p">=</span><span class="s2">&quot;0&quot;</span> k4<span class="p">=</span><span class="s2">&quot;0&quot;</span> /<span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span>feColorMatrix id<span class="p">=</span><span class="s2">&quot;filter_38&quot;</span> type<span class="p">=</span><span class="s2">&quot;saturate&quot;</span> values<span class="p">=</span><span class="s2">&quot;0&quot;</span> data<span class="p">-</span>filterid<span class="p">=</span><span class="s2">&quot;38&quot;</span> /<span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span>/filter<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>/defs<span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span>image filter<span class="p">=</span><span class="s2">&quot;url(&amp;quot;#filtersPicture&amp;quot;)&quot;</span> <span class="k">x</span><span class="p">=</span><span class="s2">&quot;0&quot;</span> <span class="k">y</span><span class="p">=</span><span class="s2">&quot;0&quot;</span> width<span class="p">=</span><span class="s2">&quot;100&quot;</span> height<span class="p">=</span><span class="s2">&quot;100&quot;</span> xmlns:xlink<span class="p">=</span><span class="s2">&quot;http://www.w3.org/1999/xlink&quot;</span> xlink:href<span class="p">=</span><span class="s2">&quot;http://williamherry.com/images/chef/attributes.jpg&quot;</span> /<span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span>/svg<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span>img src<span class="p">=</span><span class="s2">&quot;http://williamherry.com/images/chef/attributes.jpg&quot;</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了做比较我在后面放了一个不做处理的图片,你可以把上面的代码保存为<code>.html</code>格式文件用浏览器打开看看</p>

<p>上面的代码可以达到我们期望的效果,但是又有新的问题,我给它的高和宽都设置的100,但从浏览器来看它好像并不是正方形.</p>

<p>这里的问题是它是按比例缩放的,例如图片是100X1000,如果我给它设置成100X100,那么最终图片的显示可能是10X100,没有完全填满100X100</p>

<p>对于这个问题我还没有找到完美的解决办法,但有一个办法已经可以满足我自己的需求,这个方法是在<code>&lt;image</code>后面加上<code>preserveAspectRatio="xMidYMid slice"</code></p>

<p>还用上面的例子,它会把图片按比较放到和短的边一样, 这里是100X1000,然后把100X100的框放中间,多余的裁掉,剩下的就是显示的部分</p>

<p><img src="http://williamherry.com/images/svg/preverse-aspect-ratio.svg"></p>

<p>这样只要保存图片的比例和设置的很接近就可以基本上解决这个问题</p>

<p>更多<code>preserveAspectRatio</code>的信息请看<a href="http://www.w3.org/TR/SVG/coords.html">这里</a></p>

<h2>更新</h2>

<p>StackOverflow上对<a href="http://stackoverflow.com/questions/17540298/image-inside-svg-width-and-height-not-working-as-expected/17545343">这个问题</a>已经有人回答了,让图片按给定的高和宽拉伸只要把<code>preserveAspectRatio</code>设置成<code>none</code>就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解测试中的stub和mock]]></title>
    <link href="http://williamherry.com/blog/2013/05/13/understand-stub-and-mock/"/>
    <updated>2013-05-13T16:46:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/05/13/understand-stub-and-mock</id>
    <content type="html"><![CDATA[<p>刚开始学习<code>rspec</code>的时候,<code>stub</code>和<code>mock</code>理解起来有点困难,听了<code>Terry</code>和<code>aNdReW</code>的讲解后,对它们的理解深入多了,在此表示感谢</p>

<p>先从<code>stub</code>说起,什么是<code>stub</code>呢,<code>CodeSchool</code>给出这样的定义:</p>

<blockquote><p>Stub:<br/>
For replacing a method with code that returns a specified result</p></blockquote>

<p>简单说就是你可以用<code>stub</code>去<strong>伪造(fade)</strong>一个方法,<strong>阻断</strong>对原来方法的调用,例如下面来自<code>CodeSchool</code>的例子</p>

<p>我们有一个叫<code>zombie</code>的<code>model</code></p>

<figure class='code'><figcaption><span>app/models/zombie.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Zombie</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:weapon</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">decapitate</span>
</span><span class='line'>    <span class="n">weapon</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">:head</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s2">&quot;dead again&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们要测试<code>decapitate</code>方法,它里面调用了<code>weapon</code>的<code>slice</code>方法,下面是测试代码:</p>

<figure class='code'><figcaption><span>/spec/models/zombie_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;#decapitate&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;sets status to dead again&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">zombie</span><span class="o">.</span><span class="n">weapon</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:slice</span><span class="p">)</span>
</span><span class='line'>      <span class="n">zombie</span><span class="o">.</span><span class="n">decapitate</span>
</span><span class='line'>      <span class="n">zombie</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;dead again&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的第6行就是用<code>stub</code>伪造了<code>weapon</code>的<code>slice</code>方法,阻断了对原来方法的调用</p>

<p>你可能会问为什么我们要这样做,这是因为我们在做单元测试,<code>weapon</code>的<code>slice</code>可能会非常复杂,里面又调用了其它的方法等等,这是集成测试应该做的工作.事实上这里我们是在测试<code>decapitate</code>方法会把<code>zombie.status</code>设置成<code>"dead again"</code></p>

<p>接下来我们来说<code>mock</code>, <code>CodeSchool</code>上给的定义是这样的:</p>

<blockquote><p>Mock:<br/>
A stub with an expectations that the method gets called.</p></blockquote>

<p>简单来说<code>mock</code>就是<code>stub + expectation</code>, 说它是<code>stub</code>是因为它也可以像<code>stub</code>一样伪造方法,阻断对原来方法的调用, <code>expectation</code>是说它不仅伪造了这个方法,它还期望你(必须)调用这个方法,如果没有被调用到,这个<code>test</code>就<code>fail</code>了,看下面的例子</p>

<figure class='code'><figcaption><span>/spec/models/zombie_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;#decapitate&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;calls weapon.slice&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">zombie</span><span class="o">.</span><span class="n">weapon</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:slice</span><span class="p">)</span>
</span><span class='line'>      <span class="n">zombie</span><span class="o">.</span><span class="n">decapitate</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的第6行伪造了<code>weapon</code>的<code>slice</code>方法,并期望这个方法在这个测试中被调用.</p>

<p>你可能会想为什么要这样写,这是因为我们仅仅是要测试<code>decapitate</code>这个方法确实调用了<code>weapon.slice</code>, 可以把<code>decapitate</code>想成下面的黑盒,我们蹲在图中的A点,等着看它会不会去调用<code>weapon.slice</code></p>

<p><img src="http://williamherry.com/images/test/test_outgoing.jpg"></p>

<p>这个图是<code>Sandi Metz</code>在<code>RailsConf 2013</code>上的演讲<code>The Magic Tricks of Testing</code></p>

<p><a href="http://www.justin.tv/confreaks/c/2247122">视频</a></p>

<p><a href="https://speakerdeck.com/skmetz/magic-tricks-of-testing-railsconf">Slides</a></p>

<p>这里注意一下顺序,一般的测试先是执行一个动作,然后再去判断状态或其它东西,像前面<code>stub</code>的例子,先调用decapitate方法,再去判断<code>status</code>的变化,就好像我踢你一脚,看你会不会喊疼,而这里是先有期望再有动作,这就好比老板对你说这个下周前完成,不然就滚蛋一样</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openSUSE 12.3 安装完后需要做的事情]]></title>
    <link href="http://williamherry.com/blog/2013/03/23/opensuse-12-dot-3-font-configuration/"/>
    <updated>2013-03-23T02:36:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/03/23/opensuse-12-dot-3-font-configuration</id>
    <content type="html"><![CDATA[<p>今天终于把openSUSE12.3安装上了,记得上次安装openSUSE应该是好几年前吧,那时候刚开始玩Linux.记得当时选发行版的时候很纠结,老想用openSUSE但当时它还是有很多问题,尤其严重的是显示上有点问题,图形界面和字符界面不能同时和显示器边对齐,以当时的水平解决不了这个问题,就放弃而一直用的Ubuntu</p>

<p>今天安装上了最新的12.3,比以前进步太多了,fcitx输入法安装就能用(以前很麻烦的,尤其是环境是英文的),各种驱动自动帮你安好,进系统就可以开启3D,KDE4.10已经非常稳定了,不像以前动不动就Crash. 总的来说我非常满意,以后就用她了</p>

<p>不过openSUSE 12.3的默认字体还是非常难看的,需要做一些配置才可以让人看着舒服</p>

<p>其实根本的问题并不是没有好看的字体,而是字体的渲染不给力,使字体看起来很虚,锯齿很厉害,我从网上找的这个办法可以开启抗锯齿,分享给大家</p>

<p>原文地址在<a href="http://tuxperience.blogspot.com/2012/12/fix-ugly-fonts-in-kubuntu-or-kde-make.html">这里</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Fix: Ugly Fonts in Kubuntu or KDE | Make your fonts crystal clear
</span><span class='line'>
</span><span class='line'>By default, KDE Desktop and Kubuntu have a very ugly font behavior compared to GNOME or Ubuntu. But no worries. Fix is easy!
</span><span class='line'>
</span><span class='line'>How to fix it?
</span><span class='line'>
</span><span class='line'>1- Go to "System Settings &gt; Application Appearance &gt; Fonts"
</span><span class='line'>2- Enable anti-ailising.
</span><span class='line'>3- Set Use sub-pixel rendering to RGB and Slight.
</span><span class='line'>4- Go Advanced tab of Desktop Effects and set scale method to Crisp.
</span><span class='line'>
</span><span class='line'>To improve your fonts more, change your fonts to DejaVu and for a better console set console fonts to DejaVu Sans Mono 9.5.
</span><span class='line'>
</span><span class='line'>Now you have very cyrstal looking fonts! Have fun!</span></code></pre></td></tr></table></div></figure>


<p>我刚开始照他的做也看不到效果的,花了好长时间,发现一个很有意思的事情,就是把字体放大到16以后和缩小到8以后字体的渲染开始变得非常漂亮,后来才发现在第三步设置anti-ailising的时候点击后面的configure在弹出的窗口中有<code>Exclude range</code>正好是8和16,我是勾选了的,原来我把8到16之间的字体除过不渲染,去掉之后漂亮的字体终于出来了.现在你可以随便选择你喜欢的字体,都会有很好的效果</p>

<p>PS: 这些文字就是在新的openSUSE 12.3下面写的,看来以后要和Ubuntu说再见了</p>

<p>UPDATE: 无线网络的问题</p>

<p>Release Note中有说安装完无线网没有启动,需要手机重启系统,但是我发现我还遇到一个问题,有时候开机无线网络是没有连上了,点开直接是空的,我在<a href="http://forums.opensuse.org/english/get-technical-help-here/network-internet/470567-wireless-problems-opensuse-12-1-a.html">这里</a>找到了解决办法,简单说就是默认他用的<code>dhcpd</code>好像不太稳定,改成<code>dhclient</code>就好了</p>

<p>在<code>/etc/sysconfig/network/dhcp</code>中修改下面两行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DHCLIENT_BIN="dhclient"
</span><span class='line'>DHCLIENT_DEBUG="yes"</span></code></pre></td></tr></table></div></figure>


<p>加第二行是因为有一个<a href="https://bugzilla.novell.com/show_bug.cgi?id=732910">bug</a> (不过好像已经修复了)</p>

<p>UPDATE2: 支付宝插件</p>

<p>需要安装<code>libpng12-0</code>才可以使支付宝的插件安装成功,不然它提示成功但却用不了</p>

<p>UPDATE3: 无线网硬件禁用的问题</p>

<p>从sleep状态resume后无线网会是硬件禁用状态,需要手动按<code>Fn + F3</code>开启,后来发现是驱动冲突,在<code>/etc/modprobe.d/50-blacklist.conf</code>中的最后加上<code>blacklist acer-wmi</code>就好了</p>

<p>还有一直让我很迷惑的<code>Magic Lamp</code>的问题,我很早就发现这个特效会有两种不同的效果,有时会最小化收到状态栏,有时会收到鼠标的位置,后来才知道原来收到鼠标的位置是一种fallback的情形,有的时候收到状态栏不可用,比如程序刚启动的时候,状态栏还没有调整好,这时候这个特效就会收到鼠标的位置</p>

<p>还有默认的配置如果你一段时间不操作电脑,他会出现输入密码的登陆的画面,但只要你动一下鼠标或键盘就消失了,我看的一个youtube上的视频上还有人说这是个bug,其实不是,这只是它的默认屏保画面而已</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最简单的在crontab中执行rake命令的方法]]></title>
    <link href="http://williamherry.com/blog/2013/02/05/rvm-rake-cron-ubuntu/"/>
    <updated>2013-02-05T11:26:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/02/05/rvm-rake-cron-ubuntu</id>
    <content type="html"><![CDATA[<p>stackoverflow上很多都说要添加变量什么的,这是我发现的最简单而且能工作的方法,原文在<a href="http://www.wyliethomas.com/blog/2011/08/24/rvm-rake-and-cron-on-ubuntu/">这里</a></p>

<p>方法很简单,在crontab中可以定义环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crontab -e</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHELL = /home/william/.rvm/bin/rvm-shell
</span><span class='line'>
</span><span class='line'>* 4 * * * /bin/bash -l -c 'cd /path/to/app && RAILS_ENV=production rake mytask –silent'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails图片上传]]></title>
    <link href="http://williamherry.com/blog/2013/01/25/rails-image-upload/"/>
    <updated>2013-01-25T22:27:00+08:00</updated>
    <id>http://williamherry.com/blog/2013/01/25/rails-image-upload</id>
    <content type="html"><![CDATA[<p>好久没有更新这个了,竟然连<code>rake new_post['title']</code>都忘记了还得查文档,看来以后还是得时不时的写点</p>

<p>这里简单记录一下Rails中如何处理图片上传,我们选择<a href="https://github.com/jnicklas/carrierwave">CarrierWave</a>这个gem来处理上传的文件,由于重点是处理图片上传,所以我们会使用scaffolding生成一个article的CURD,把图片绑定给它(一个article有一个图片)</p>

<p>首先我们创建一个Rails项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new image-upload-demo</span></code></pre></td></tr></table></div></figure>


<p>然后用脚手架生成article</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd image-upload-demo
</span><span class='line'>rails g scaffold article title:string content:text</span></code></pre></td></tr></table></div></figure>


<p>执行migration生成数据库表结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p><code>rails s</code>启动服务,访问<code>http://localhost:3000/articles</code>检查有没错误</p>

<p>如果没有问题,下一步我们就可以设定CarrierWave了,首先是安装,在Gemfile里添加一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'carrierwave'</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>bundle install</code>进行安装,然后用下面的命令创建uploader</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g uploader photo</span></code></pre></td></tr></table></div></figure>


<p>这会创建<code>app/uploaders/photo_uploader.rb</code>这个文件,carrierwave的一些设定都在这个文件里面,我们目前先不做更改,只使用默认配置</p>

<p>接着我们给article表加一个字段来存储文件信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g migration AddPhotoToArticles photo:string</span></code></pre></td></tr></table></div></figure>


<p>别忘了执行<code>rake db:migrate</code>生成表结构</p>

<p>然后的article的model里加入调用carrierwave的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># app/models/article.rb
</span><span class='line'>class Article &lt; ActiveRecord::Base
</span><span class='line'>  attr_accessible :content, :title, :photo
</span><span class='line'>
</span><span class='line'>  mount_uploader :photo, PhotoUploader
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>别忘了把<code>photo</code>也加到<code>attr_accessible</code>里哦
这样Model和数据库就可以处理上传上来的文件了,接下来在view里加入上传图片的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># app/views/articles/_form.html.erb
</span><span class='line'>&lt;%= form_for(@article, :html =&gt; {:multipart =&gt; true}) do |f| %&gt;
</span><span class='line'>...
</span><span class='line'>  &lt;div class="field"&gt;
</span><span class='line'>    &lt;%= f.label :title %&gt;&lt;br /&gt;
</span><span class='line'>    &lt;%= f.text_field :title %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;div class="field"&gt;
</span><span class='line'>    &lt;%= f.label :content %&gt;&lt;br /&gt;
</span><span class='line'>    &lt;%= f.text_area :content %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;div class="field"&gt;
</span><span class='line'>    &lt;label&gt;My Photo&lt;/label&gt;
</span><span class='line'>    &lt;%= f.file_field :photo %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;div class="actions"&gt;
</span><span class='line'>    &lt;%= f.submit %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>关键在form_for中添加<code>:html =&gt; {:multipart =&gt; true}</code>,现在就可以使用上传的功能了,并且上传的图片可以简单的使用<code>&lt;%= image_tag @article.photo %&gt;</code>来调用,我们再在显示的view里加入显示图片的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># app/views/articles/show.html.erb
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span><span class='line'>  &lt;b&gt;Photo:&lt;/b&gt;
</span><span class='line'>  &lt;%= image_tag @article.photo %&gt;
</span><span class='line'>&lt;/p&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>现在就可以测试了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Nginx+SSL代理chef-server]]></title>
    <link href="http://williamherry.com/blog/2012/10/12/proxy-chef-server-with-nginx/"/>
    <updated>2012-10-12T21:09:00+08:00</updated>
    <id>http://williamherry.com/blog/2012/10/12/proxy-chef-server-with-nginx</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>本文介绍使用Nginx做为chef-server的前端代理服务器,并使用SSL加密传输数据</p>

<p>这里使用的系统是centos,应该也适用于其它的发行版</p>

<p>这里假设你已经配置好了chef-server,在整个过程中都不需要对chef-server做修改(你可能会想到让chef-server只监听在127.0.0.1上)</p>

<h2>安装Nginx</h2>

<pre><code>yum -y install nginx
</code></pre>

<h2>生成自签名证书</h2>

<pre><code>mkdir -p /etc/ssl/nginx
cd /etc/ssl/nginx
openssl genrsa -out chef-server.pem 2048
openssl req -new -x509 -key chef-server.pem -out chef-server.crt -days 1095 # 回车后按提示填一堆乱七八糟的东西
</code></pre>

<h2>修改nginx配置文件</h2>

<p>这里有一个例子(注意key的路径以及server_name直接写IP地址)</p>

<figure class='code'><figcaption><span>vim</span><a href='http://williamherry.com/etc/nginx/nginx.conf'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#######################################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This is the main Nginx configuration file.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># More information about the configuration options is available on</span>
</span><span class='line'><span class="c">#   * the English wiki - http://wiki.nginx.org/Main</span>
</span><span class='line'><span class="c">#   * the Russian documentation - http://sysoev.ru/nginx/</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#######################################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Main Module - directives that cover basic functionality</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   http://wiki.nginx.org/NginxHttpMainModule</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>user              nginx;
</span><span class='line'>worker_processes  1;
</span><span class='line'>
</span><span class='line'>error_log  /var/log/nginx/error.log;
</span><span class='line'><span class="c">#error_log  /var/log/nginx/error.log  notice;</span>
</span><span class='line'><span class="c">#error_log  /var/log/nginx/error.log  info;</span>
</span><span class='line'>
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Events Module</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   http://wiki.nginx.org/NginxHttpEventsModule</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>    worker_connections  1024;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># HTTP Core Module</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   http://wiki.nginx.org/NginxHttpCoreModule</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>    include       /etc/nginx/mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>
</span><span class='line'>    log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                      <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span>;
</span><span class='line'>
</span><span class='line'>    access_log  /var/log/nginx/access.log  main;
</span><span class='line'>
</span><span class='line'>    sendfile        on;
</span><span class='line'>    <span class="c">#tcp_nopush     on;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#keepalive_timeout  0;</span>
</span><span class='line'>    keepalive_timeout  65;
</span><span class='line'>
</span><span class='line'>    <span class="c">#gzip  on;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Load config files from the /etc/nginx/conf.d directory</span>
</span><span class='line'>    <span class="c"># The default server is in conf.d/default.conf</span>
</span><span class='line'>    include /etc/nginx/conf.d/*.conf;
</span><span class='line'>    upstream chef-server <span class="o">{</span>
</span><span class='line'>      server 127.0.0.1:4000;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    server <span class="o">{</span>
</span><span class='line'>        listen 443 ssl;
</span><span class='line'>
</span><span class='line'>        server_name 192.168.122.44;
</span><span class='line'>        root /var/lib/chef/rack/api/public;
</span><span class='line'>
</span><span class='line'>        ssl_certificate     /etc/ssl/nginx/chef-server.crt;
</span><span class='line'>        ssl_certificate_key /etc/ssl/nginx/chef-server.key;
</span><span class='line'>
</span><span class='line'>        location / <span class="o">{</span>
</span><span class='line'>            try_files <span class="nv">$uri</span> @backend;
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        location @backend <span class="o">{</span>
</span><span class='line'>            proxy_set_header X-Forwarded-Proto <span class="s1">&#39;https&#39;</span>;
</span><span class='line'>            proxy_set_header Host <span class="nv">$server_name</span>;
</span><span class='line'>            proxy_pass http://chef-server;
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>检查配置文件并启动服务</h2>

<pre><code>nginx -t
/etc/init.d/nginx start
</code></pre>

<h2>修改client使用新的地址</h2>

<figure class='code'><figcaption><span>vim</span><a href='http://williamherry.com/etc/chef/client.rb'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">chef_server_url</span>  <span class="s1">&#39;https://ip-of-chef-server&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>vim ~/.chef/knife.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">chef_server_url</span>  <span class="s1">&#39;https://ip-of-chef-server&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef基础之Arrtibutes]]></title>
    <link href="http://williamherry.com/blog/2012/10/10/chef-attributes/"/>
    <updated>2012-10-10T21:42:00+08:00</updated>
    <id>http://williamherry.com/blog/2012/10/10/chef-attributes</id>
    <content type="html"><![CDATA[<p>本文档是对官方Wiki<a href="http://wiki.opscode.com/display/chef/Attributes">Attributes</a>的翻译</p>

<h2>概述</h2>

<p><img src="http://williamherry.com/images/chef/attributes.jpg"></p>

<p>属性(Attributes)就是节点(Node)的信息,如IP地址,主机名,加载的内核模块,系统中可用的编程语言的版本以及更多.新的属性可以用多种方式加到节点上.</p>

<h2>属性类型和优先级</h2>

<p><img src="http://williamherry.com/images/chef/attribute-priority-stack.png"></p>

<p>有四种类型的属性,按优先级从高到低的顺序排列,它们是:</p>

<ul>
<li>automatic</li>
<li>override</li>
<li>normal</li>
<li>default</li>
</ul>


<p><em>用默认属性(default)写你的cookbook, 如果有必要,在role或者node中覆盖默认变量</em></p>

<p>Chef没有提供任何方式去修改自动属性(automatic),因为Ohai下次运行的时候回覆盖你做的任何修改.检验<a href="http://wiki.opscode.com/display/chef/Automatic+Attributes">自动属性</a>看有那些保留的命名</p>

<h2>属性的持久性</h2>

<p><em>每一次chef-client运行的开始,默认属性,覆盖属性和自动属性会被完全重置</em></p>

<p>然后会利用当前的cookbooks, recipes, roles, environment和Ohai数据重新组建</p>

<p>所以,一量recipe, role或environment从一个node移除并且chef-client在这个node上运行,那么在cookbook的attribute文件,roles, recipes或environments里设置的default和override属性会消失</p>

<p><em>Normal属性不会被重置</em></p>

<p>而是,第一次chef-client运行,任何以JSON文件形式传递给node的新属性会被合并到node中已经存在的normal属性中(使用<a href="http://wiki.opscode.com/display/chef/Deep+Merge">Deep Merge</a>)</p>

<p>这就意味着,任何在recipe或cookbook中定义的normal属性会仍然存在,即使是cookbook或role已经从node的run list移除后</p>

<h2>设置属性</h2>

<p>属性可以在下面的对象中设置</p>

<ul>
<li>cookbooks</li>
<li>environments (Chef 0.10.0 or above only)</li>
<li>roles</li>
<li>nodes</li>
</ul>


<h3>优先级</h3>

<p><em>属性的优先级从低到高排列在下面</em></p>

<ul>
<li>attributes文件中定义的default属性</li>
<li>environment中定义的default属性</li>
<li>role中定义的default属性</li>
<li>直接在node的recipe中定义的default属性</li>
<li>attributes文件中定义的normal或set属性</li>
<li>直接在node的recipe中定义的normal或set属性</li>
<li>attributes文件中定义的override属性</li>
<li>role中定义的override属性</li>
<li>environment中定义的override属性</li>
<li>直接在node的recipe中定义的override属性</li>
<li>Ohai产生的automatic属性</li>
</ul>


<p>在attributes文件里定义的default属性有最低的优先级. Ohai生成的automatic属性有最高的优先级</p>

<p><em>用默认属性(default)写你的cookbook, 如果有必要,在role或者node中覆盖默认变量</em></p>

<p><a href="http://wiki.opscode.com/display/chef/Setting+Attributes+%28Examples%29">这里</a>有例子</p>

<h2>Cookbook中定义属性</h2>

<p>Cookbook的属性文件可以在cookbook的attributes子目录中找到.他们在Node对象的上下文中运算并且使用Node的方法设置属性的值</p>

<p>来自Oposcode的Apache cookbook中的例子</p>

<figure class='code'><figcaption><span>cookbooks/apache2/attributes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;apache&quot;</span><span class="o">][</span><span class="s2">&quot;dir&quot;</span><span class="o">]</span>          <span class="o">=</span> <span class="s2">&quot;/etc/apache2&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;apache&quot;</span><span class="o">][</span><span class="s2">&quot;listen_ports&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span><span class="s2">&quot;443&quot;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里Node对象的使用是隐含的,下面这样写和上面等价</p>

<figure class='code'><figcaption><span>cookbooks/apache2/attributes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">default</span><span class="o">[</span><span class="s2">&quot;apache&quot;</span><span class="o">][</span><span class="s2">&quot;dir&quot;</span><span class="o">]</span>          <span class="o">=</span> <span class="s2">&quot;/etc/apache2&quot;</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">default</span><span class="o">[</span><span class="s2">&quot;apache&quot;</span><span class="o">][</span><span class="s2">&quot;listen_ports&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span><span class="s2">&quot;443&quot;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性也可以在recipe中设置,但这时<code>node.</code>就不能省略了</p>

<h3>Cookbook设置属性的方法</h3>

<p>使用下面的方法在cookbook的attributes文件或recipe中设置属性.他们对应到和他们名字相同的属性类型(set是normal的一个别名)</p>

<ul>
<li>override</li>
<li>default</li>
<li>normal(or set)</li>
</ul>


<h3>Cookbook中属性文件的加载顺序</h3>

<p>Chef按字母顺序加载cookbook中的属性文件.如果你需要一个属性文件在另一个之前加载(例如,你的Apache的cookbook属性文件的加载需要在Rails的cookbook属性文件加载之后),你可以使用<code>include_attribute</code>方法.像这样:</p>

<figure class='code'><figcaption><span>include\_attribute </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_attribute</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;apache2&#39;</span><span class="o">][</span><span class="s1">&#39;proxy_to_unicorn&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;rails&#39;</span><span class="o">][</span><span class="s1">&#39;use_unicorn&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会在继续处理当前属性之前首先加载<code>rails/attributes/defaults.rb</code></p>

<p>双冒号的写法也适用于<code>include_attribute</code></p>

<figure class='code'><figcaption><span>include\_attribute </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_attribute</span> <span class="s2">&quot;rails::tunables&quot;</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;apache2&#39;</span><span class="o">][</span><span class="s1">&#39;proxy_to_unicorn&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;rails&#39;</span><span class="o">][</span><span class="s1">&#39;use_unicorn&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会加载rails cookbook中的<code>attributes/tunables.rb</code>文件</p>

<h3>从Recipes中重新加载Attribute文件</h3>

<p>有时候属性依赖于recipes中的动作,所以可能会需要在recipe中重新加载属性.例如,你有一个读防火墙规则的属性,并且有一个安装防火墙软件的recipe,第一次执行这个cookbook防火墙的属性不会被设置.因为<code>include_attribute</code>在recipes中不可用,所以你需要手动重新加载<code>firewall::default</code>属性</p>

<figure class='code'><figcaption><span>reloading attributes from recipes </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s1">&#39;iptables&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:create</span><span class="p">,</span> <span class="s1">&#39;ruby_block[try_firewall_again]&#39;</span><span class="p">,</span> <span class="ss">:immediately</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ruby_block</span> <span class="s1">&#39;try_firewall_again&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">block</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="n">load_attribute_by_short_filename</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="s1">&#39;firewall&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:nothing</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>访问属性的方法</h3>

<p>属性访问方法会自动创建并且方法可以和键交换使用.下面的例子和上面的用法等价</p>

<figure class='code'><figcaption><span>cookbooks/apache2/attributes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">.</span><span class="n">apache</span><span class="o">.</span><span class="n">dir</span>          <span class="o">=</span> <span class="s2">&quot;/etc/apache2&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">.</span><span class="n">apache</span><span class="o">.</span><span class="n">listen_ports</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span><span class="s2">&quot;443&quot;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用哪个只是风格问题,你可能会在检索属性的值的时候看到</p>

<h2>Environment中设置属性</h2>

<p><em>Environment中可以设置default和override属性</em></p>

<p>这可以在Environment的Ruby DSL文件里(分别)通过default_attributes和<code>override_attributes</code>方法设置,或者在Environment的JSON数据中使用<code>default_attributes</code>和<code>override_attributes</code>Hashes进行设置.经常会指定一些这个Environment特别有属性.例如在&#8221;production&#8221;环境和&#8221;staging&#8221;环境外部负载均衡器的公共DNS可能会不一样</p>

<h2>在Role中定义属性</h2>

<p><em>在Role中只可以设置default和override属性,不能设置normal属性.</em>这可以在Role的Ruby DSL文件里(分别)通过<code>default_attributes</code>和<code>override_attributes</code>方法设置,或者在Role的JSON数据中使用<code>default_attributes</code>和<code>override_attributes</code>Hashes进行设置.经常会指定一些各个Role不同的属性.例如一个<code>php_apache2_server</code>的role可能会和<code>mod_perl_apche2_server</code>使用不同的优化参数</p>

<h2>在Node中定义属性</h2>

<p>最终,Node对象可以直接被修改以设置属性.通常会设置normal优先级的属性.可以通过使用knife工具直接编辑node,或者通过WebUI.或者通过传递JSON数据给Node进行设置</p>

<h3>JSON属性</h3>

<p>你可以使用JSON文件指定Node的属性,它们会以normal的优先级添加到Node</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef-client --help
</span><span class='line'>[...]
</span><span class='line'>    -j JSON_ATTRIBS                  Load attributes from a JSON file or URL
</span><span class='line'>        --json-attributes</span></code></pre></td></tr></table></div></figure>


<p>例如.设置Apache监听不同的端口</p>

<figure class='code'><figcaption><span>JSON attribute example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;apache&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;listen_ports&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;81&quot;</span><span class="p">,</span> <span class="s2">&quot;8080&quot;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记住.通过JSON文件传递的属性会和Node已经保存的属性合并并且没有办法覆盖,但是如果有冲突,从JSON文件传递的属性会最终被使用</p>

<h3>Automatic属性</h3>

<p>这第四种属性不能被修改,因为你做的任何修改都会在下一次运行时被Ohai数据覆盖</p>

<h2>如果使用属性</h2>

<ul>
<li><p>属性的优势</p>

<ul>
<li>为应用程序跨平台的抽象例如配置文件的路径</li>
<li>优化参数的默认值例如给处理器多少内存或开启多少个进程</li>
<li>任何其它你想要在Chef运行之间保留(在Node的数据)的信息</li>
</ul>
</li>
</ul>


<h3>使用的最佳实践</h3>

<p><em>属性优先级的通用模式是在cookbooks和roles中使用default属性</em></p>

<ul>
<li>如果你要改变一个特定Node的值,使用normal属性</li>
<li>Overrides属性是指roles可以强制设定一个特定的属性,即使Node已经有相应的属性</li>
</ul>


<p>肯定有其它的使用方式,但上面的模式是设计的初衷</p>

<h3>设置同一优先级的属性</h3>

<p><em>一个通用的使用案例是在cookbook的attribute文件中设置default属性,并且在role中以不同的值设置相同的default属性.</em>在这种情况下,role中的属性会被<a href="http://wiki.opscode.com/display/chef/Deep+Merge">deep merged</a>到来自attribute文件中的属性顶端.如果有冲突,在role中设置的属性会被使用.</p>

<h3>只有在这个属性没有值的时候才设置</h3>

<p>在属性文件里,你也可以使用属性优先方法的变种<code>_unless</code>方法来做到只有在一个属性没有值时才设置这个属性,这些方法是<code>default_unless</code>, <code>set_unless</code>和<code>override_unless</code>.这些方法有时候非常方便,但要小心使用!</p>

<p>在你使用这些方法的时候,这些加到你的Node中的属性会和你在cookbooks中定义的不同步,当你更新cookbook的时候.这意味着建立一个和已经存在的Node使用相同的recipes和roles会得到不同的配置&mdash;会给调试带来麻烦.出于这个原因,你应该尽可能不用<code>_unless</code>方法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git学习资料收集]]></title>
    <link href="http://williamherry.com/blog/2012/10/10/learning-git-resources/"/>
    <updated>2012-10-10T20:40:00+08:00</updated>
    <id>http://williamherry.com/blog/2012/10/10/learning-git-resources</id>
    <content type="html"><![CDATA[<p>收集一下学习Git过程中用过的比较好的资料</p>

<h2>ProGit</h2>

<p>首先是Github的Scott Chacon写的一本叫ProGit的书,已经有人翻译成中文了.可能大多数人学习Git就是从这本书开始的</p>

<p>中文版不知道有没有的买,英文版在亚马逊上的售价是357.90人民币.不过好在它可以在线读全部的内容,也可以下载pdf或其它流行的版本</p>

<p><a href="http://git-scm.com/book">英文版在线读地址</a></p>

<p><a href="http://ishare.iask.sina.com.cn/f/15315980.html">中文版下载地址</a></p>

<h2>Git权威指南</h2>

<p>还有一本国人写的书Git权威指南,比ProGit要深入全面,个人感觉值得一读.好像不能下载pdf版</p>

<p><a href="http://www.worldhello.net/gotgit/">Git权威指南</a></p>

<h2>Tech Talk: Linus Torvalds on Git</h2>

<p>Git的作者,Linux之父Linus在Google的演讲,在演讲中他说出了这样的霸气测露的话</p>

<blockquote><p>You can disagree with me as much as you want, but during this talk, by definition, anybody who disagrees is stupid and ugly, so keep that in mind</p></blockquote>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/4XpnKHJAok8 "></iframe></div>


<h2>Introduction to Git with Scott Chacon of GitHub</h2>

<p>这是ProGit的作者的演讲视频,语速很快,演讲用到的资料做的非常赞</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZDR433b0HJY "></iframe></div>


<h2>Advanced Git: Graphs, Hashes, and Compression, Oh My!</h2>

<p>这是GitHub的另一个员工做的演讲,里面讲了一些非常底层的东西</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ig5E8CcdM9g "></iframe></div>


<h2>Git and Github</h2>

<p>这又是Github的另一个工程师的演讲视频,他里面用到一个小脚本可以让执行命令的同时看到变量,让人印象深刻.我还给他发邮件要这个小东西</p>

<p>由于嵌入vimeo然插件不工作了,点<a href="https://vimeo.com/49444883">这里</a>观看</p>
]]></content>
  </entry>
  
</feed>
